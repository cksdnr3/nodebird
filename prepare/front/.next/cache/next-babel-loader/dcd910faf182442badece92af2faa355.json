{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cksdn\\\\dev\\\\project\\\\nodebird\\\\prepare\\\\front\\\\components\\\\PostCard.js\";\nimport React, { useCallback, useState } from 'react';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport { HeartOutlined, MessageOutlined, RetweetOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport FollowBtn from './FollowBtn';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport { deletePostRequestAction } from '../reducers/post';\nimport { LIKE_REQUEST, RETWEET_REQUEST, UNLIKE_REQUEST } from '../actions/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment.locale('ko');\n\nconst PostCard = ({\n  post\n}) => {\n  var _post$Retweet;\n\n  const id = useSelector(state => {\n    var _state$user$myInfo;\n\n    return (_state$user$myInfo = state.user.myInfo) === null || _state$user$myInfo === void 0 ? void 0 : _state$user$myInfo.id;\n  });\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    deletePostLoading\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = post.Likers.find(l => l.id === id);\n  const onLike = useCallback(() => {\n    if (!id) {\n      console.log('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: LIKE_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      console.log('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: UNLIKE_REQUEST,\n      data: post.id\n    });\n  }, []);\n  const onToggleComment = useCallback(() => {\n    if (!id) {\n      console.log('로그인이 필요합니다.');\n    }\n\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const clickDeleteBtn = useCallback(() => {\n    if (!id) {\n      console.log('로그인이 필요합니다.');\n    }\n\n    dispatch(deletePostRequestAction(post.id));\n  }, [post.id]);\n  const onRetweet = useCallback(() => {\n    if (!id) {\n      console.log('로그인이 필요합니다.');\n    }\n\n    dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 34\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {\n        onClick: onRetweet\n      }, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"comment\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: id && post.User.id === id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC218\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              loading: deletePostLoading,\n              onClick: clickDeleteBtn,\n              type: \"danger\",\n              children: \"\\uC0AD\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"\\uC2E0\\uACE0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this)\n          }, void 0, false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, \"more\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)],\n      extra: id && id !== post.User.id && /*#__PURE__*/_jsxDEV(FollowBtn, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 45\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          float: 'right'\n        },\n        children: moment(post.createdAt).fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), post.Retweet ? /*#__PURE__*/_jsxDEV(Card, {\n        cover: post.Retweet.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n          images: post.Retweet.Images\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 48\n        }, this),\n        title: `${post.User.nickname}님이 리트윗 했습니다.`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            float: 'right'\n          },\n          children: moment(post === null || post === void 0 ? void 0 : post.Retweet.createdAt).format('YYYY.MM.DD')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n          avatar: /*#__PURE__*/_jsxDEV(Link, {\n            href: `/user/${(_post$Retweet = post.Retweet) === null || _post$Retweet === void 0 ? void 0 : _post$Retweet.User.id}`,\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              children: /*#__PURE__*/_jsxDEV(Avatar, {\n                children: post.User.nickname[0]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 19\n          }, this),\n          title: post.Retweet.User.nickname,\n          description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n            postData: post.Retweet.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 30\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Link, {\n          href: `/user/${post === null || post === void 0 ? void 0 : post.User.id}`,\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            children: /*#__PURE__*/_jsxDEV(Avatar, {\n              children: post.User.nickname[0]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        renderItem: item => post.Comments.length ? /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            content: item.content,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: `/user/${item === null || item === void 0 ? void 0 : item.User.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: post.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 23\n            }, this),\n            author: item.User.nickname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false),\n        header: `${post.Comments.length}개의 댓글`,\n        dataSource: post.Comments,\n        itemLayout: \"horizontal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      nickname: PropTypes.string,\n      id: PropTypes.number\n    }),\n    content: PropTypes.string,\n    createdAt: PropTypes.string.isRequired,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object),\n    Retweet: PropTypes.objectOf(PropTypes.any).isRequired\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/components/PostCard.js"],"names":["React","useCallback","useState","Card","Button","Avatar","Popover","List","Comment","HeartOutlined","MessageOutlined","RetweetOutlined","EllipsisOutlined","HeartTwoTone","useDispatch","useSelector","PropTypes","Link","moment","PostImages","FollowBtn","CommentForm","PostCardContent","deletePostRequestAction","LIKE_REQUEST","RETWEET_REQUEST","UNLIKE_REQUEST","locale","PostCard","post","id","state","user","myInfo","commentFormOpened","setCommentFormOpened","deletePostLoading","dispatch","liked","Likers","find","l","onLike","console","log","type","data","onUnlike","onToggleComment","prev","clickDeleteBtn","onRetweet","marginBottom","Images","User","float","createdAt","fromNow","Retweet","nickname","format","content","item","Comments","length","propTypes","shape","number","string","isRequired","arrayOf","object","objectOf","any"],"mappings":"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","sourcesContent":["import React, { useCallback, useState } from 'react';\r\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\r\nimport { HeartOutlined, MessageOutlined, RetweetOutlined, EllipsisOutlined, HeartTwoTone } from '@ant-design/icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\nimport PostImages from './PostImages';\r\nimport FollowBtn from './FollowBtn';\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport { deletePostRequestAction } from '../reducers/post';\r\nimport { LIKE_REQUEST, RETWEET_REQUEST, UNLIKE_REQUEST } from '../actions/post';\r\n\r\nmoment.locale('ko');\r\n\r\nconst PostCard = ({ post }) => {\r\n  const id = useSelector((state) => state.user.myInfo?.id);\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  const { deletePostLoading } = useSelector((state) => state.post);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const liked = post.Likers.find((l) => l.id === id);\r\n  const onLike = useCallback(() => {\r\n    if (!id) {\r\n      console.log('로그인이 필요합니다.');\r\n    }\r\n    dispatch({\r\n      type: LIKE_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n\r\n  const onUnlike = useCallback(() => {\r\n    if (!id) {\r\n      console.log('로그인이 필요합니다.');\r\n    }\r\n\r\n    dispatch({\r\n      type: UNLIKE_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, []);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    if (!id) {\r\n      console.log('로그인이 필요합니다.');\r\n    }\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const clickDeleteBtn = useCallback(() => {\r\n    if (!id) {\r\n      console.log('로그인이 필요합니다.');\r\n    }\r\n    dispatch(deletePostRequestAction(post.id));\r\n  }, [post.id]);\r\n\r\n  const onRetweet = useCallback(() => {\r\n    if (!id) {\r\n      console.log('로그인이 필요합니다.');\r\n    }\r\n    dispatch({\r\n      type: RETWEET_REQUEST,\r\n      data: post.id,\r\n    });\r\n  }, [id]);\r\n\r\n  return (\r\n    <div style={{ marginBottom: 10 }}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\r\n          liked ? (\r\n            <HeartTwoTone\r\n              twoToneColor=\"#eb2f96\"\r\n              key=\"heart\"\r\n              onClick={onUnlike}\r\n            />\r\n          ) : (\r\n            <HeartOutlined\r\n              key=\"heart\"\r\n              onClick={onLike}\r\n            />\r\n          ),\r\n          <MessageOutlined\r\n            key=\"comment\"\r\n            onClick={onToggleComment}\r\n          />,\r\n          <Popover\r\n            key=\"more\"\r\n            content={(\r\n              <Button.Group>\r\n                {id && post.User.id === id ? (\r\n                  <>\r\n                    <Button>수정</Button>\r\n                    <Button loading={deletePostLoading} onClick={clickDeleteBtn} type=\"danger\">삭제</Button>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Button>신고</Button>\r\n                  </>\r\n                )}\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={id && id !== post.User.id && <FollowBtn post={post} />}\r\n      >\r\n        <div style={{ float: 'right' }}>{moment(post.createdAt).fromNow()}</div>\r\n        {post.Retweet\r\n          ? (\r\n            <Card\r\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\r\n              title={`${post.User.nickname}님이 리트윗 했습니다.`}\r\n            >\r\n              <div style={{ float: 'right' }}>{moment(post?.Retweet.createdAt).format('YYYY.MM.DD')}</div>\r\n              <Card.Meta\r\n                avatar={(\r\n                  <Link href={`/user/${post.Retweet?.User.id}`}>\r\n                    <a>\r\n                      <Avatar>{post.User.nickname[0]}</Avatar>\r\n                    </a>\r\n                  </Link>\r\n                )}\r\n                title={post.Retweet.User.nickname}\r\n                description={<PostCardContent postData={post.Retweet.content} />}\r\n              />\r\n            </Card>\r\n          )\r\n          : (\r\n            <Card.Meta\r\n              avatar={(\r\n                <Link href={`/user/${post?.User.id}`}>\r\n                  <a>\r\n                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                  </a>\r\n                </Link>\r\n              )}\r\n              title={post.User.nickname}\r\n              description={<PostCardContent postData={post.content} />}\r\n            />\r\n          )}\r\n\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <div>\r\n          <CommentForm post={post} />\r\n          <List\r\n            renderItem={(item) => (post.Comments.length\r\n              ? (\r\n                <li>\r\n                  <Comment\r\n                    content={item.content}\r\n                    avatar={(\r\n                      <Link href={`/user/${item?.User.id}`}>\r\n                        <a>\r\n                          <Avatar>{post.User.nickname[0]}</Avatar>\r\n                        </a>\r\n                      </Link>\r\n                    )}\r\n                    author={item.User.nickname}\r\n                  />\r\n                </li>\r\n              )\r\n              : <></>)}\r\n            header={`${post.Comments.length}개의 댓글`}\r\n            dataSource={post.Comments}\r\n            itemLayout=\"horizontal\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.shape({\r\n      nickname: PropTypes.string,\r\n      id: PropTypes.number,\r\n    }),\r\n    content: PropTypes.string,\r\n    createdAt: PropTypes.string.isRequired,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n    Likers: PropTypes.arrayOf(PropTypes.object),\r\n    Retweet: PropTypes.objectOf(PropTypes.any).isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}