{"ast":null,"code":"import { all, fork } from '@redux-saga/core/effects';\nimport { delay, put, takeLatest } from 'redux-saga/effects';\nimport { FOLLOW_REQUEST, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_FAILURE, SIGNUP_REQUEST, SIGNUP_SUCCESS } from '../actions/user'; // const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\n// function loginAPI(data) {\n//   return axios.post('api/login', data);\n// }\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.data);\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGIN_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function logoutAPI() {\n//   return axios.post('api/logout');\n// }\n\n\nfunction* logout() {\n  // const result = yield call(logoutAPI);\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // function signupAPI(data) {\n//   return axios.post('api/signup', data);\n// }\n\n\nfunction* signup(action) {\n  try {\n    // const result = signupAPI(action.data);\n    yield delay(1000);\n    localStorage.setItem('id', action.data.id);\n    localStorage.setItem('pwd', action.data.pwd);\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGNUP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // while (true) {\n  //     yield take('LOG_IN_REQUEST', login);\n  // }\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  // while (true) {\n  //     yield take('LOG_OUT_REQUEST', logout);\n  // }\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchFollow)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","FOLLOW_REQUEST","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","SIGNUP_FAILURE","SIGNUP_REQUEST","SIGNUP_SUCCESS","login","action","type","data","err","error","response","logout","signup","localStorage","setItem","id","pwd","watchLogin","watchLogout","watchFollow","follow","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,cAAT,EAAyBC,aAAzB,EAAwCC,aAAxC,EAAuDC,aAAvD,EAAsEC,cAAtE,EACEC,cADF,EACkBC,cADlB,EACkCC,cADlC,EAEEC,cAFF,EAEkBC,cAFlB,QAEwC,iBAFxC,C,CAIA;AAEA;AACA;AACA;;AAEA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACtB;AACA,MAAI;AACF,UAAMd,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAET,aADE;AAERU,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFL,KAAD,CAAT;AAID,GAND,CAME,OAAOC,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEX,aADE;AAERc,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUI,MAAV,GAAmB;AACjB;AACA,MAAI;AACF,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEN;AADE,KAAD,CAAT;AAGD,GALD,CAKE,OAAOQ,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAER,cADE;AAERW,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF,C,CAED;AACA;AACA;;;AAEA,UAAUK,MAAV,CAAiBP,MAAjB,EAAyB;AACvB,MAAI;AACF;AACA,UAAMd,KAAK,CAAC,IAAD,CAAX;AACAsB,IAAAA,YAAY,CAACC,OAAb,CAAqB,IAArB,EAA2BT,MAAM,CAACE,IAAP,CAAYQ,EAAvC;AACAF,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BT,MAAM,CAACE,IAAP,CAAYS,GAAxC;AACA,UAAMxB,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEH;AADE,KAAD,CAAT;AAGD,GARD,CAQE,OAAOK,GAAP,EAAY;AACZ,UAAMhB,GAAG,CAAC;AACRc,MAAAA,IAAI,EAAEL,cADE;AAERQ,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFZ,KAAD,CAAT;AAID;AACF;;AAED,UAAUU,UAAV,GAAuB;AACrB;AACA;AACA;AACA,QAAMxB,UAAU,CAACG,aAAD,EAAgBQ,KAAhB,CAAhB;AACD;;AAED,UAAUc,WAAV,GAAwB;AACtB;AACA;AACA;AAEA,QAAMzB,UAAU,CAACM,cAAD,EAAiBY,MAAjB,CAAhB;AACD;;AAED,UAAUQ,WAAV,GAAwB;AACtB,QAAM1B,UAAU,CAACC,cAAD,EAAiB0B,MAAjB,CAAhB;AACD;;AAED,UAAUC,WAAV,GAAwB;AACtB,QAAM5B,UAAU,CAACS,cAAD,EAAiBU,MAAjB,CAAhB;AACD;;AAED,eAAe,UAAUU,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAACC,IAAI,CAAC2B,UAAD,CAAL,EAAmB3B,IAAI,CAAC4B,WAAD,CAAvB,EACR5B,IAAI,CAAC+B,WAAD,CADI,EACW/B,IAAI,CAAC6B,WAAD,CADf,CAAD,CAAT;AAED","sourcesContent":["import { all, fork } from '@redux-saga/core/effects';\r\nimport { delay, put, takeLatest } from 'redux-saga/effects';\r\nimport { FOLLOW_REQUEST, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE,\r\n  LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_FAILURE,\r\n  SIGNUP_REQUEST, SIGNUP_SUCCESS } from '../actions/user';\r\n\r\n// const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\r\n\r\n// function loginAPI(data) {\r\n//   return axios.post('api/login', data);\r\n// }\r\n\r\nfunction* login(action) {\r\n  // const result = yield call(loginAPI, action.data);\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function logoutAPI() {\r\n//   return axios.post('api/logout');\r\n// }\r\n\r\nfunction* logout() {\r\n  // const result = yield call(logoutAPI);\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOGOUT_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOGOUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// function signupAPI(data) {\r\n//   return axios.post('api/signup', data);\r\n// }\r\n\r\nfunction* signup(action) {\r\n  try {\r\n    // const result = signupAPI(action.data);\r\n    yield delay(1000);\r\n    localStorage.setItem('id', action.data.id);\r\n    localStorage.setItem('pwd', action.data.pwd);\r\n    yield put({\r\n      type: SIGNUP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGNUP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // while (true) {\r\n  //     yield take('LOG_IN_REQUEST', login);\r\n  // }\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n  // while (true) {\r\n  //     yield take('LOG_OUT_REQUEST', logout);\r\n  // }\r\n\r\n  yield takeLatest(LOGOUT_REQUEST, logout);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchSignup() {\r\n  yield takeLatest(SIGNUP_REQUEST, signup);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogout),\r\n    fork(watchSignup), fork(watchFollow)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}