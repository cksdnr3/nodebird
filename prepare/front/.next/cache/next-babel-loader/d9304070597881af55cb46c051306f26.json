{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://thebook.io/img/covers/cover_080263.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_080233.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_006945.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null\n};\nexport const addPostRequestAction = {\n  type: ADD_POST_REQUEST\n};\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\nconst dummyPost = {\n  id: 2,\n  content: 'dummyContent',\n  User: {\n    id: 1,\n    nickname: 'dummyUser'\n  },\n  Images: [],\n  Comments: []\n};\nconst dummyComment = {\n  User: {\n    nickname: 'user1'\n  },\n  content: 'comment1',\n  User: {\n    nickname: 'user2'\n  },\n  content: 'comment2'\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost, ...state.mainPosts],\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread({}, state);\n\n    case ADD_COMMENT_REQUEST:\n      {\n        console.log(action.payload);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: state.mainPosts.map((post, idx) => {\n            if (post.id === action.payload) {\n              return _objectSpread(_objectSpread({}, state.mainPosts[idx]), {}, {\n                Comments: [dummyComment, ...state.mainPosts[idx].Comments]\n              });\n            }\n\n            return state.mainPosts[idx];\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["ADD_COMMENT_REQUEST","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addPostRequestAction","type","addCommentRequestAction","data","dummyPost","dummyComment","reducer","state","action","console","log","payload","map","post","idx"],"mappings":"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","sourcesContent":["import { ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '찬욱',\r\n            },\r\n            content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n            Images: [\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_080263.jpg',\r\n                },\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_080233.jpg',\r\n                },\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_006945.jpg',\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: 'user1',\r\n                    },\r\n                    content: 'comment 1',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user2',\r\n                    },\r\n                    content: 'comment 2',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user3',\r\n                    },\r\n                    content: 'comment 3',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n};\r\n\r\nexport const addPostRequestAction = {\r\n    type: ADD_POST_REQUEST,\r\n};\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: 'dummyContent',\r\n    User: {\r\n        id: 1,\r\n        nickname: 'dummyUser',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    User: {\r\n        nickname: 'user1',\r\n    },\r\n    content: 'comment1',\r\n    User: {\r\n        nickname: 'user2',\r\n    },\r\n    content: 'comment2',\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addPostLoading: true,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                addPostDone: true,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n            };\r\n        case ADD_COMMENT_REQUEST: {\r\n            console.log(action.payload);\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map((post, idx) => {\r\n                    if (post.id === action.payload) {\r\n                        return {\r\n                            ...state.mainPosts[idx],\r\n                            Comments: [dummyComment, ...state.mainPosts[idx].Comments],\r\n                        };\r\n                    }\r\n                    return state.mainPosts[idx];\r\n                }),\r\n            };\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}