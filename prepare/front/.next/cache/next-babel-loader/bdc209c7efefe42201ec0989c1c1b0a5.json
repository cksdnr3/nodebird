{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchSignup),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork } from '@redux-saga/core/effects';\nimport axios from 'axios';\nimport { delay, put, takeLatest } from 'redux-saga/effects';\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_REQUEST } from '../reducers/user'; // const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: LOGIN_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: LOGIN_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logoutAPI() {\n  return axios.post('api/logout');\n}\n\nfunction logout(action) {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: LOGOUT_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: LOGOUT_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOGIN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOGOUT_REQUEST, logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchSignup() {\n  return _regeneratorRuntime.wrap(function watchSignup$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(SIGNUP_REQUEST, signup);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["login","logout","watchLogin","watchLogout","watchSignup","userSaga","all","fork","axios","delay","put","takeLatest","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","SIGNUP_REQUEST","loginAPI","data","post","action","type","response","logoutAPI","signup"],"mappings":";;oDAWUA,K;qDAoBAC,M;qDAeAC,U;qDAOAC,W;qDAQAC,W;qDAIeC,Q;;AAjEzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,cAAtD,EAAsEC,cAAtE,EAAsFC,cAAtF,EAAsGC,cAAtG,QAA4H,kBAA5H,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOZ,KAAK,CAACa,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUpB,KAAV,CAAgBsB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAET,aADA;AAENM,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMV,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAEX,aADA;AAENQ,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASK,SAAT,GAAqB;AACjB,SAAOjB,KAAK,CAACa,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUpB,MAAV,CAAiBqB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMb,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAEN;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMP,GAAG,CAAC;AACNa,YAAAA,IAAI,EAAER,cADA;AAENK,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUlB,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAII,iBAAMS,UAAU,CAACE,aAAD,EAAgBb,KAAhB,CAAhB;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMQ,UAAU,CAACK,cAAD,EAAiBf,MAAjB,CAAhB;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACO,cAAD,EAAiBQ,MAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUrB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACL,UAAD,CAAL,EAAmBK,IAAI,CAACJ,WAAD,CAAvB,EAAsCI,IAAI,CAACH,WAAD,CAA1C,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork } from '@redux-saga/core/effects';\r\nimport axios from 'axios';\r\nimport { delay, put, takeLatest } from 'redux-saga/effects';\r\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_REQUEST } from '../reducers/user';\r\n\r\n// const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('api/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    // const result = yield call(loginAPI, action.data);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOGIN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOGIN_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('api/logout');\r\n}\r\n\r\nfunction* logout(action) {\r\n    // const result = yield call(logoutAPI);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOGOUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOGOUT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // while (true) {\r\n    //     yield take('LOG_IN_REQUEST', login);\r\n    // }\r\n    yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n    // while (true) {\r\n    //     yield take('LOG_OUT_REQUEST', logout);\r\n    // }\r\n\r\n    yield takeLatest(LOGOUT_REQUEST, logout);\r\n}\r\n\r\nfunction* watchSignup() {\r\n    yield takeLatest(SIGNUP_REQUEST, signup);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}