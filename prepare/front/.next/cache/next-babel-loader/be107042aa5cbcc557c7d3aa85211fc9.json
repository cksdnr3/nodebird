{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cksdn\\\\dev\\\\project\\\\nodebird\\\\prepare\\\\front\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useInput from '../hooks/useInput';\nimport { addCommentRequestAction } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addPostDone = _useSelector.addPostDone;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addPostDone) {\n      setCommentText('');\n    }\n  }, [addPostDone]);\n  var onSubmit = useCallback(function () {\n    console.log(post.id, commentText);\n    dispatch(addCommentRequestAction({\n      content: commentText,\n      postId: post.id,\n      userId: id\n    }));\n  }, [commentText]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        style: {\n          marginBottom: 5\n        },\n        placeholder: \"\\uB313\\uAE00\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        style: {\n          \"float\": 'right'\n        },\n        type: \"primary\",\n        htmlType: \"submit\",\n        children: \"comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommentForm, \"wTfTZByBLegYGdku7rIh/KQBTps=\", false, function () {\n  return [useInput, useSelector, useSelector, useDispatch];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.shape({\n      nickname: PropTypes.string\n    }),\n    content: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","PropTypes","Button","Form","Input","useDispatch","useSelector","useInput","addCommentRequestAction","CommentForm","post","commentText","onChangeCommentText","setCommentText","id","state","user","me","addPostDone","dispatch","onSubmit","console","log","content","postId","userId","marginBottom","propTypes","shape","number","User","nickname","string","Comments","arrayOf","object","Images","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button, Form, Input } from 'antd';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport useInput from '../hooks/useInput';\r\nimport { addCommentRequestAction } from '../reducers/post';\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput('');\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const { addPostDone } = useSelector((state) => state.post);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setCommentText('');\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    console.log(post.id, commentText);\r\n    dispatch(\r\n      addCommentRequestAction({\r\n        content: commentText,\r\n        postId: post.id,\r\n        userId: id,\r\n      }),\r\n    );\r\n  }, [commentText]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmit}>\r\n      <Form.Item>\r\n        <Input.TextArea style={{ marginBottom: 5 }} placeholder=\"댓글을 입력해주세요.\" value={commentText} onChange={onChangeCommentText} rows={4} />\r\n        <Button style={{ float: 'right' }} type=\"primary\" htmlType=\"submit\">\r\n          comment\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.shape({\r\n      nickname: PropTypes.string,\r\n    }),\r\n    content: PropTypes.string,\r\n    Comments: PropTypes.arrayOf(PropTypes.object),\r\n    Images: PropTypes.arrayOf(PropTypes.object),\r\n  }).isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}