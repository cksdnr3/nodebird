{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\cksdn\\\\dev\\\\project\\\\nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport { addPostRequestAction } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostLoading = _useSelector.addPostLoading;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      myInfo = _useSelector2.myInfo;\n\n  var dispatch = useDispatch();\n  var imageInput = useRef();\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      text = _useInput2[0],\n      onChangeText = _useInput2[1],\n      setText = _useInput2[2];\n\n  useEffect(function () {\n    if (myInfo.Posts.length) {\n      setText('');\n    }\n  }, [myInfo.Posts.length]);\n  var onSubmit = useCallback(function () {\n    dispatch(addPostRequestAction(text));\n  }, [text]);\n  var clickImgUploadBtn = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    console.log('image: ', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    name: \"image\",\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"enter post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clickImgUploadBtn,\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          \"float\": 'right'\n        },\n        loading: addPostLoading,\n        htmlType: \"submit\",\n        children: \"Twit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imagePaths.map(function (path) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: path,\n            style: {\n              width: 200\n            },\n            alt: path\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, _this)]\n        }, path, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostForm, \"7ED+45ZyPNGqkSUXNGos0JXdPs0=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useInput];\n});\n\n_c = PostForm;\nexport default PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useEffect","useRef","useDispatch","useSelector","Form","Input","Button","addPostRequestAction","useInput","PostForm","state","post","imagePaths","addPostLoading","user","myInfo","dispatch","imageInput","text","onChangeText","setText","Posts","length","onSubmit","clickImgUploadBtn","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","UPLOAD_IMAGES_REQUEST","data","margin","map","path","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { addPostRequestAction } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths, addPostLoading } = useSelector((state) => state.post);\r\n  const { myInfo } = useSelector((state) => state.user);\r\n  const dispatch = useDispatch();\r\n  const imageInput = useRef();\r\n\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (myInfo.Posts.length) {\r\n      setText('');\r\n    }\r\n  }, [myInfo.Posts.length]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    dispatch(addPostRequestAction(text));\r\n  }, [text]);\r\n\r\n  const clickImgUploadBtn = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    console.log('image: ', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} name=\"image\" encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n      <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"enter post\" />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={clickImgUploadBtn}>Upload Image</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} loading={addPostLoading} htmlType=\"submit\">\r\n          Twit\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((path) => (\r\n          <div key={path} style={{ display: 'inline-block' }}>\r\n            <img src={path} style={{ width: 200 }} alt={path} />\r\n            <div>\r\n              <Button>Delete</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}