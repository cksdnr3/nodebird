{"ast":null,"code":"import produce from 'immer';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGE_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../actions/post';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likeLoading: false,\n  likeDone: false,\n  likeError: null,\n  unlikeLoading: false,\n  unlikeDone: false,\n  unlikeError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  hasMorePosts: true\n};\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var deletePostRequestAction = function deletePostRequestAction(data) {\n  return {\n    type: DELETE_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false; // immer 사용\n\n        draft.mainPosts.unshift(action.data); // immer 사용 X\n        // [dummyPost(action.data), ...state.mainPosts];\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        console.log(action.error);\n        break;\n\n      case DELETE_POST_REQUEST:\n        draft.deletePostLoading = true;\n        break;\n\n      case DELETE_POST_SUCCESS:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (p) {\n          return p.id !== action.data.PostId;\n        });\n        break;\n\n      case DELETE_POST_FAILURE:\n        draft.deletePostLoading = false;\n        draft.deletePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          var post = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n        }\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = false;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case LIKE_REQUEST:\n        draft.likeLoading = true;\n        break;\n\n      case LIKE_SUCCESS:\n        {\n          draft.likeLoading = false;\n          draft.likeDone = true;\n\n          var _post = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          break;\n        }\n\n      case LIKE_FAILURE:\n        draft.likeError = action.Error;\n        draft.likeLoading = false;\n        break;\n\n      case UNLIKE_REQUEST:\n        draft.unlikeLoading = true;\n        break;\n\n      case UNLIKE_SUCCESS:\n        {\n          draft.unlikeLoading = false;\n          draft.unlikeDone = true;\n\n          var _post2 = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (l) {\n            return l.id !== action.data.UserId;\n          });\n          break;\n        }\n\n      case UNLIKE_FAILURE:\n        draft.unlikeError = action.Error;\n        draft.unlikeLoading = false;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.imagePaths = action.data;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer; // export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\n//   id: v4(),\n//   User: {\n//     id: v4(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: v4(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.text,\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: v4(),\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   content: data.content,\n// });","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["produce","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","loadPostsLoading","loadPostsDone","loadPostsError","likeLoading","likeDone","likeError","unlikeLoading","unlikeDone","unlikeError","uploadImagesLoading","uploadImagesDone","uploadImagesError","hasMorePosts","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","reducer","state","action","draft","unshift","error","console","log","filter","p","id","PostId","post","find","Comments","concat","length","Likers","push","UserId","Error","l"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS,\r\n  UPLOAD_IMAGE_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  likeLoading: false,\r\n  likeDone: false,\r\n  likeError: null,\r\n  unlikeLoading: false,\r\n  unlikeDone: false,\r\n  unlikeError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(action.data);\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      console.log(action.error);\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data.PostId);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n    }\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.loadPostsError = action.error;\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case LIKE_REQUEST:\r\n      draft.likeLoading = true;\r\n      break;\r\n    case LIKE_SUCCESS: {\r\n      draft.likeLoading = false;\r\n      draft.likeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      break;\r\n    }\r\n    case LIKE_FAILURE:\r\n      draft.likeError = action.Error;\r\n      draft.likeLoading = false;\r\n      break;\r\n    case UNLIKE_REQUEST:\r\n      draft.unlikeLoading = true;\r\n      break;\r\n    case UNLIKE_SUCCESS: {\r\n      draft.unlikeLoading = false;\r\n      draft.unlikeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((l) => l.id !== action.data.UserId);\r\n      break;\r\n    }\r\n    case UNLIKE_FAILURE:\r\n      draft.unlikeError = action.Error;\r\n      draft.unlikeLoading = false;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      draft.imagePaths = action.data;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n\r\n// export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: v4(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: v4(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// const dummyPost = (data) => ({\r\n//   id: data.id,\r\n//   content: data.text,\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   content: data.content,\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}