{"ast":null,"code":"import axios from 'axios';\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\n\nconst addPostAPI = data => axios.post('/post', {\n  content: data\n});\n\nfunction* addPost(action) {\n  try {\n    const response = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: response.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst deletePostAPI = data => axios.delete(`post/${data}`);\n\nfunction* deletePost(action) {\n  try {\n    const response = yield call(deletePostAPI, action.data);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: DELETE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst addCommentAPI = data => axios.post(`/post/${data.postId}/comment`, data);\n\nfunction* addComment(action) {\n  try {\n    const response = yield call(addCommentAPI, action.data);\n    console.log(JSON.stringify(response.data));\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst loadPostsAPI = () => axios.get('/posts');\n\nfunction* loadPosts() {\n  try {\n    const response = yield call(loadPostsAPI);\n    console.log(JSON.stringify(response.data));\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst likeAPI = data => axios.patch(`post/${data}/like`);\n\nfunction* like(action) {\n  try {\n    const response = yield call(likeAPI, action.data);\n    yield put({\n      type: LIKE_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst unlikeAPI = data => axios.delete(`post/${data}/like`);\n\nfunction* unlike(action) {\n  try {\n    const response = yield call(unlikeAPI, action.data);\n    yield put({\n      type: UNLIKE_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchDeletePost() {\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\n}\n\nfunction* watchLike() {\n  yield takeLatest(LIKE_REQUEST, like);\n}\n\nfunction* watchUnlike() {\n  yield takeLatest(UNLIKE_REQUEST, unlike);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["axios","all","call","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","addPostAPI","data","post","content","addPost","action","response","type","id","err","error","deletePostAPI","delete","deletePost","addCommentAPI","postId","addComment","console","log","JSON","stringify","loadPostsAPI","get","loadPosts","likeAPI","patch","like","unlikeAPI","unlike","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","watchLike","watchUnlike","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS } from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', { content: data });\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst deletePostAPI = (data) => axios.delete(`post/${data}`);\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const response = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = () => axios.get('/posts');\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    const response = yield call(loadPostsAPI);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst likeAPI = (data) => axios.patch(`post/${data}/like`);\r\n\r\nfunction* like(action) {\r\n  try {\r\n    const response = yield call(likeAPI, action.data);\r\n    yield put({\r\n      type: LIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst unlikeAPI = (data) => axios.delete(`post/${data}/like`);\r\n\r\nfunction* unlike(action) {\r\n  try {\r\n    const response = yield call(unlikeAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLike() {\r\n  yield takeLatest(LIKE_REQUEST, like);\r\n}\r\n\r\nfunction* watchUnlike() {\r\n  yield takeLatest(UNLIKE_REQUEST, unlike);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}