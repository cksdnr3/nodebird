{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cksdn\\\\dev\\\\project\\\\nodebird\\\\prepare\\\\front\\\\components\\\\PostForm.js\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Form, Input, Button } from 'antd';\nimport { addPostRequestAction } from '../reducers/post';\nimport useInput from '../hooks/useInput';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../actions/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostLoading\n  } = useSelector(state => state.post);\n  const {\n    myInfo\n  } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const imageInput = useRef();\n  const [text, onChangeText, setText] = useInput('');\n  useEffect(() => {\n    if (myInfo.Posts.length) {\n      setText('');\n    }\n  }, [myInfo.Posts.length]);\n  const onSubmit = useCallback(() => {\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성해주세요!');\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const clickImgUploadBtn = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onDelete = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    name: \"image\",\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"enter post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: clickImgUploadBtn,\n        children: \"Upload Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        style: {\n          float: 'right'\n        },\n        loading: addPostLoading,\n        htmlType: \"submit\",\n        children: \"Twit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: imagePaths.map((path, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'inline-block'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: `http://localhost:3065/${path}`,\n          style: {\n            width: 200\n          },\n          alt: path\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onDelete(i),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)]\n      }, path, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useEffect","useRef","useDispatch","useSelector","Form","Input","Button","addPostRequestAction","useInput","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","PostForm","imagePaths","addPostLoading","state","post","myInfo","user","dispatch","imageInput","text","onChangeText","setText","Posts","length","onSubmit","trim","alert","formData","FormData","forEach","p","append","type","data","clickImgUploadBtn","current","click","onChangeImages","e","imageFormData","call","target","files","f","onDelete","index","margin","float","map","path","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { addPostRequestAction } from '../reducers/post';\r\nimport useInput from '../hooks/useInput';\r\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../actions/post';\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths, addPostLoading } = useSelector((state) => state.post);\r\n  const { myInfo } = useSelector((state) => state.user);\r\n  const dispatch = useDispatch();\r\n  const imageInput = useRef();\r\n\r\n  const [text, onChangeText, setText] = useInput('');\r\n\r\n  useEffect(() => {\r\n    if (myInfo.Posts.length) {\r\n      setText('');\r\n    }\r\n  }, [myInfo.Posts.length]);\r\n\r\n  const onSubmit = useCallback(() => {\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성해주세요!');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    });\r\n    formData.append('content', text);\r\n    return dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const clickImgUploadBtn = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onDelete = useCallback((index) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: index,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} name=\"image\" encType=\"multipart/form-data\" onFinish={onSubmit}>\r\n      <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"enter post\" />\r\n      <div>\r\n        <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={clickImgUploadBtn}>Upload Image</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} loading={addPostLoading} htmlType=\"submit\">\r\n          Twit\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((path, i) => (\r\n          <div key={path} style={{ display: 'inline-block' }}>\r\n            <img src={`http://localhost:3065/${path}`} style={{ width: 200 }} alt={path} />\r\n            <div>\r\n              <Button onClick={onDelete(i)}>Delete</Button>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}