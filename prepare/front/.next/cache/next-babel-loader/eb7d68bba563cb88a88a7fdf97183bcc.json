{"ast":null,"code":"import { v4 } from 'uuid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nexport var dummyPostsGenerator = function dummyPostsGenerator(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: v4(),\n      User: {\n        id: v4(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: v4(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  hasMorePosts: true\n};\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var deletePostRequestAction = function deletePostRequestAction(data) {\n  return {\n    type: DELETE_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.text,\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: v4(),\n    User: {\n      id: data.myInfo.id,\n      nickname: data.myInfo.nickname\n    },\n    content: data.content\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false; // immer 사용\n\n        draft.mainPosts.unshift(action.data); // immer 사용 X\n        // [dummyPost(action.data), ...state.mainPosts];\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case DELETE_POST_REQUEST:\n        draft.deletePostLoading = true;\n        break;\n\n      case DELETE_POST_SUCCESS:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (p) {\n          return p.id !== action.data;\n        });\n        break;\n\n      case DELETE_POST_FAILURE:\n        draft.deletePostLoading = false;\n        draft.deletePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        draft.mainPosts.find(function (p) {\n          return p.id === action.data.postId;\n        }).Comments.unshift(dummyComment(action.data)); //   draft.mainPosts.forEach((post) => {\n        //     if (post.id === action.data.postId) {\n        //       post.Comments.unshift(dummyComment(action.data));\n        //     }\n        //   });\n\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = false;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","faker","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","dummyPostsGenerator","number","Array","fill","map","id","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","loadPostsLoading","loadPostsDone","loadPostsError","hasMorePosts","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyComment","myInfo","reducer","state","action","draft","unshift","error","filter","p","find","postId","concat","length"],"mappings":"AAAA,SAASA,EAAT,QAAmB,MAAnB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,EAAwEC,gBAAxE,EAA0FC,gBAA1F,EAA4GC,gBAA5G,EAA8HC,mBAA9H,EAAmJC,mBAAnJ,EAAwKC,mBAAxK,EAA6LC,iBAA7L,EAAgNC,iBAAhN,EAAmOC,iBAAnO,QAA4P,iBAA5P;AAEA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD;AAAA,SAAYC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB;AAAA,WAAO;AAC7EC,MAAAA,EAAE,EAAEpB,EAAE,EADuE;AAE7EqB,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEpB,EAAE,EADF;AAEJsB,QAAAA,QAAQ,EAAEpB,KAAK,CAACqB,IAAN,CAAWC,QAAX;AAFN,OAFuE;AAM7EC,MAAAA,OAAO,EAAEvB,KAAK,CAACwB,KAAN,CAAYC,SAAZ,EANoE;AAO7EC,MAAAA,MAAM,EAAE,CAAC;AACPC,QAAAA,GAAG,EAAE3B,KAAK,CAAC4B,KAAN,CAAYA,KAAZ;AADE,OAAD,CAPqE;AAU7EC,MAAAA,QAAQ,EAAE,CAAC;AACTV,QAAAA,IAAI,EAAE;AACJD,UAAAA,EAAE,EAAEpB,EAAE,EADF;AAEJsB,UAAAA,QAAQ,EAAEpB,KAAK,CAACqB,IAAN,CAAWC,QAAX;AAFN,SADG;AAKTC,QAAAA,OAAO,EAAEvB,KAAK,CAACwB,KAAN,CAAYM,QAAZ;AALA,OAAD;AAVmE,KAAP;AAAA,GAAzB,CAAZ;AAAA,CAA5B;AAmBP,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,cAAc,EAAE,KAHU;AAI1BC,EAAAA,WAAW,EAAE,KAJa;AAK1BC,EAAAA,YAAY,EAAE,IALY;AAM1BC,EAAAA,iBAAiB,EAAE,KANO;AAO1BC,EAAAA,cAAc,EAAE,KAPU;AAQ1BC,EAAAA,eAAe,EAAE,IARS;AAS1BC,EAAAA,iBAAiB,EAAE,KATO;AAU1BC,EAAAA,cAAc,EAAE,KAVU;AAW1BC,EAAAA,eAAe,EAAE,IAXS;AAY1BC,EAAAA,gBAAgB,EAAE,KAZQ;AAa1BC,EAAAA,aAAa,EAAE,KAbW;AAc1BC,EAAAA,cAAc,EAAE,IAdU;AAe1BC,EAAAA,YAAY,EAAE;AAfY,CAArB;AAkBP,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,SAAW;AAC7CC,IAAAA,IAAI,EAAE5C,gBADuC;AAE7C2C,IAAAA,IAAI,EAAJA;AAF6C,GAAX;AAAA,CAA7B;AAKP,OAAO,IAAME,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACF,IAAD;AAAA,SAAW;AAChDC,IAAAA,IAAI,EAAEzC,mBAD0C;AAEhDwC,IAAAA,IAAI,EAAJA;AAFgD,GAAX;AAAA,CAAhC;AAIP,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACH,IAAD;AAAA,SAAW;AAChDC,IAAAA,IAAI,EAAE/C,mBAD0C;AAEhD8C,IAAAA,IAAI,EAAJA;AAFgD,GAAX;AAAA,CAAhC,C,CAKP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD;AAAA,SAAW;AAC9B9B,IAAAA,EAAE,EAAEpB,EAAE,EADwB;AAE9BqB,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE8B,IAAI,CAACK,MAAL,CAAYnC,EADZ;AAEJE,MAAAA,QAAQ,EAAE4B,IAAI,CAACK,MAAL,CAAYjC;AAFlB,KAFwB;AAM9BG,IAAAA,OAAO,EAAEyB,IAAI,CAACzB;AANgB,GAAX;AAAA,CAArB;;AASA,IAAM+B,OAAO,GAAG,SAAVA,OAAU;AAAA,MAACC,KAAD,uEAASxB,YAAT;AAAA,MAAuByB,MAAvB;AAAA,SAAkCzD,OAAO,CAACwD,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC1E,YAAQD,MAAM,CAACP,IAAf;AACE,WAAK5C,gBAAL;AACEoD,QAAAA,KAAK,CAACvB,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAK5B,gBAAL;AACEmD,QAAAA,KAAK,CAACvB,cAAN,GAAuB,KAAvB,CADF,CAEE;;AACAuB,QAAAA,KAAK,CAACzB,SAAN,CAAgB0B,OAAhB,CAAwBF,MAAM,CAACR,IAA/B,EAHF,CAIE;AACA;;AACA;;AACF,WAAK5C,gBAAL;AACEqD,QAAAA,KAAK,CAACvB,cAAN,GAAuB,KAAvB;AACAuB,QAAAA,KAAK,CAACrB,YAAN,GAAqBoB,MAAM,CAACG,KAA5B;AACA;;AACF,WAAKnD,mBAAL;AACEiD,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAK/B,mBAAL;AACEgD,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,KAA1B;AACAiB,QAAAA,KAAK,CAAChB,cAAN,GAAuB,IAAvB;AACAgB,QAAAA,KAAK,CAACzB,SAAN,GAAkByB,KAAK,CAACzB,SAAN,CAAgB4B,MAAhB,CAAuB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAAC3C,EAAF,KAASsC,MAAM,CAACR,IAAvB;AAAA,SAAvB,CAAlB;AACA;;AACF,WAAKzC,mBAAL;AACEkD,QAAAA,KAAK,CAACjB,iBAAN,GAA0B,KAA1B;AACAiB,QAAAA,KAAK,CAACf,eAAN,GAAwBc,MAAM,CAACG,KAA/B;AACA;;AACF,WAAKzD,mBAAL;AACEuD,QAAAA,KAAK,CAACpB,iBAAN,GAA0B,IAA1B;AACA;;AACF,WAAKlC,mBAAL;AACEsD,QAAAA,KAAK,CAACnB,cAAN,GAAuB,IAAvB;AACAmB,QAAAA,KAAK,CAACpB,iBAAN,GAA0B,KAA1B;AACAoB,QAAAA,KAAK,CAACzB,SAAN,CAAgB8B,IAAhB,CAAqB,UAACD,CAAD;AAAA,iBAAOA,CAAC,CAAC3C,EAAF,KAASsC,MAAM,CAACR,IAAP,CAAYe,MAA5B;AAAA,SAArB,EACGlC,QADH,CACY6B,OADZ,CACoBN,YAAY,CAACI,MAAM,CAACR,IAAR,CADhC,EAHF,CAKE;AACA;AACA;AACA;AACA;;AACA;;AACF,WAAK/C,mBAAL;AACEwD,QAAAA,KAAK,CAACZ,cAAN,GAAuBW,MAAM,CAACG,KAA9B;AACAF,QAAAA,KAAK,CAACd,gBAAN,GAAyB,KAAzB;AACA;;AACF,WAAKhC,iBAAL;AACE8C,QAAAA,KAAK,CAACd,gBAAN,GAAyB,IAAzB;AACA;;AACF,WAAK/B,iBAAL;AACE6C,QAAAA,KAAK,CAACd,gBAAN,GAAyB,KAAzB;AACAc,QAAAA,KAAK,CAACb,aAAN,GAAsB,IAAtB;AACAa,QAAAA,KAAK,CAACzB,SAAN,GAAkBwB,MAAM,CAACR,IAAP,CAAYgB,MAAZ,CAAmBP,KAAK,CAACzB,SAAzB,CAAlB;AACAyB,QAAAA,KAAK,CAACX,YAAN,GAAqBW,KAAK,CAACzB,SAAN,CAAgBiC,MAAhB,GAAyB,EAA9C;AACA;;AACF,WAAKvD,iBAAL;AACE+C,QAAAA,KAAK,CAACd,gBAAN,GAAyB,KAAzB;AACAc,QAAAA,KAAK,CAACZ,cAAN,GAAuBW,MAAM,CAACG,KAA9B;AACA;;AAEF;AAAS;AA3DX;AA6DD,GA9DwD,CAAzC;AAAA,CAAhB;;AAgEA,eAAeL,OAAf","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n  id: v4(),\r\n  User: {\r\n    id: v4(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: v4(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// const dummyPost = (data) => ({\r\n//   id: data.id,\r\n//   content: data.text,\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// });\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(action.data);\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      draft.mainPosts.find((p) => p.id === action.data.postId)\r\n        .Comments.unshift(dummyComment(action.data));\r\n      //   draft.mainPosts.forEach((post) => {\r\n      //     if (post.id === action.data.postId) {\r\n      //       post.Comments.unshift(dummyComment(action.data));\r\n      //     }\r\n      //   });\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.loadPostsError = action.error;\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n      draft.hasMorePosts = draft.mainPosts.length < 50;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}