{"ast":null,"code":"import axios from 'axios';\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\nimport { dummyPostsGenerator } from '../reducers/post';\n\nconst addPostAPI = data => axios.post('/post', {\n  content: data\n});\n\nfunction* addPost(action) {\n  try {\n    const response = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: response.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* deletePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: DELETE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst addCommentAPI = data => axios.post(`/post/${data.postId}/comment`, data);\n\nfunction* addComment(action) {\n  try {\n    const response = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst loadPostsAPI = data => axios.get('api/posts');\n\nfunction* loadPosts(action) {\n  try {\n    const response = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchDeletePost() {\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["axios","all","call","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","dummyPostsGenerator","addPostAPI","data","post","content","addPost","action","response","type","id","err","error","deletePost","addCommentAPI","postId","addComment","loadPostsAPI","get","loadPosts","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\nimport { dummyPostsGenerator } from '../reducers/post';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', { content: data });\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = (data) => axios.get('api/posts');\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const response = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}