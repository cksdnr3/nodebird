{"ast":null,"code":"import produce from 'immer';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGE_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../actions/post';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  likeLoading: false,\n  likeDone: false,\n  likeError: null,\n  unlikeLoading: false,\n  unlikeDone: false,\n  unlikeError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  hasMorePosts: true\n};\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const deletePostRequestAction = data => ({\n  type: DELETE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false; // immer 사용\n\n      draft.mainPosts.unshift(action.data); // immer 사용 X\n      // [dummyPost(action.data), ...state.mainPosts];\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      console.log(action.error);\n      break;\n\n    case DELETE_POST_REQUEST:\n      draft.deletePostLoading = true;\n      break;\n\n    case DELETE_POST_SUCCESS:\n      draft.deletePostLoading = false;\n      draft.deletePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(p => p.id !== action.data.PostId);\n      break;\n\n    case DELETE_POST_FAILURE:\n      draft.deletePostLoading = false;\n      draft.deletePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        const post = draft.mainPosts.find(p => p.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n      }\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.loadPostsError = action.error;\n      draft.loadPostsLoading = false;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostsLoading = true;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = draft.mainPosts.length === 10;\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case LIKE_REQUEST:\n      draft.likeLoading = true;\n      break;\n\n    case LIKE_SUCCESS:\n      {\n        draft.likeLoading = false;\n        draft.likeDone = true;\n        const post = draft.mainPosts.find(p => p.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        break;\n      }\n\n    case LIKE_FAILURE:\n      draft.likeError = action.Error;\n      draft.likeLoading = false;\n      break;\n\n    case UNLIKE_REQUEST:\n      draft.unlikeLoading = true;\n      break;\n\n    case UNLIKE_SUCCESS:\n      {\n        draft.unlikeLoading = false;\n        draft.unlikeDone = true;\n        const post = draft.mainPosts.find(p => p.id === action.data.PostId);\n        post.Likers = post.Likers.filter(l => l.id !== action.data.UserId);\n        break;\n      }\n\n    case UNLIKE_FAILURE:\n      draft.unlikeError = action.Error;\n      draft.unlikeLoading = false;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesDone = true;\n      draft.imagePaths = action.data;\n      break;\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case REMOVE_IMAGE:\n      if (action.data) {\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      } else {\n        draft.imagePaths = [];\n      }\n\n      break;\n\n    case RETWEET_REQUEST:\n      draft.retweetLoading = true;\n      break;\n\n    case RETWEET_SUCCESS:\n      draft.retweetLoading = false;\n      draft.retweetDone = true;\n      console.log(action.data);\n      draft.mainPosts.unshift(action.data);\n      break;\n\n    case RETWEET_FAILURE:\n      draft.retweetLoading = false;\n      draft.retweetError = action.error;\n      console.error(action.error);\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer; // export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\n//   id: v4(),\n//   User: {\n//     id: v4(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: v4(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.text,\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: v4(),\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   content: data.content,\n// });","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["produce","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","loadPostsLoading","loadPostsDone","loadPostsError","likeLoading","likeDone","likeError","unlikeLoading","unlikeDone","unlikeError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","hasMorePosts","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","reducer","state","action","draft","unshift","error","console","log","filter","p","id","PostId","post","find","Comments","concat","length","Likers","push","UserId","Error","l","v","i"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS,\r\n  UPLOAD_IMAGE_REQUEST, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS,\r\n} from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  likeLoading: false,\r\n  likeDone: false,\r\n  likeError: null,\r\n  unlikeLoading: false,\r\n  unlikeDone: false,\r\n  unlikeError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(action.data);\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      console.log(action.error);\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data.PostId);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n    }\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.loadPostsError = action.error;\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = draft.mainPosts.length === 10;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case LIKE_REQUEST:\r\n      draft.likeLoading = true;\r\n      break;\r\n    case LIKE_SUCCESS: {\r\n      draft.likeLoading = false;\r\n      draft.likeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      break;\r\n    }\r\n    case LIKE_FAILURE:\r\n      draft.likeError = action.Error;\r\n      draft.likeLoading = false;\r\n      break;\r\n    case UNLIKE_REQUEST:\r\n      draft.unlikeLoading = true;\r\n      break;\r\n    case UNLIKE_SUCCESS: {\r\n      draft.unlikeLoading = false;\r\n      draft.unlikeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((l) => l.id !== action.data.UserId);\r\n      break;\r\n    }\r\n    case UNLIKE_FAILURE:\r\n      draft.unlikeError = action.Error;\r\n      draft.unlikeLoading = false;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      draft.imagePaths = action.data;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      if (action.data) {\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      } else {\r\n        draft.imagePaths = [];\r\n      }\r\n      break;\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      break;\r\n    case RETWEET_SUCCESS:\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      console.log(action.data);\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      console.error(action.error);\r\n      break;\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n\r\n// export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: v4(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: v4(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// const dummyPost = (data) => ({\r\n//   id: data.id,\r\n//   content: data.text,\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   content: data.content,\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}