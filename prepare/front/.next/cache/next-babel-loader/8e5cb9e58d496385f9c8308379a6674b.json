{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\n\nfunction addPostAPI() {\n  return axios.post('api/login');\n}\n\nfunction addPost(action) {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          localStorage.setItem('id', action.data.id);\n          localStorage.setItem('pwd', action.data.pwd);\n          _context.next = 7;\n          return put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: 'ADD_POST_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('ADD_POST_REQUEST', addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","axios","all","delay","fork","put","takeLatest","addPostAPI","post","action","localStorage","setItem","data","id","pwd","type","result","response"],"mappings":";;oDAOUA,O;qDAkBAC,Y;qDAQeC,Q;;AAjCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;;AAEA,SAASC,UAAT,GAAsB;AAClB,SAAON,KAAK,CAACO,IAAN,CAAW,WAAX,CAAP;AACH;;AAED,SAAUV,OAAV,CAAkBW,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAIQO,UAAAA,YAAY,CAACC,OAAb,CAAqB,IAArB,EAA2BF,MAAM,CAACG,IAAP,CAAYC,EAAvC;AACAH,UAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,MAAM,CAACG,IAAP,CAAYE,GAAxC;AALR;AAMQ,iBAAMT,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAE,kBADA;AAENH,YAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,WAAD,CAAT;;AANR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWQ,iBAAMP,GAAG,CAAC;AACNU,YAAAA,IAAI,EAAE,kBADA;AAENH,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAUb,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMO,UAAU,CAAC,kBAAD,EAAqBR,OAArB,CAAhB;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CAACE,IAAI,CAACL,YAAD,CAAL,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\n\r\nfunction addPostAPI() {\r\n    return axios.post('api/login');\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        localStorage.setItem('id', action.data.id);\r\n        localStorage.setItem('pwd', action.data.pwd);\r\n        yield put({\r\n            type: 'ADD_POST_SUCCESS',\r\n            data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'ADD_POST_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    // while (true) {\r\n    //     yield take('ADD_POST_REQUEST', addPost);\r\n    // }\r\n\r\n    yield takeLatest('ADD_POST_REQUEST', addPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}