{"ast":null,"code":"import { v4 } from 'uuid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null\n};\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: v4(),\n    User: {\n      id: v4(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.imageUrl()\n    }],\n    Comments: [{\n      User: {\n        id: v4(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n}));\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var deletePostRequestAction = function deletePostRequestAction(data) {\n  return {\n    type: DELETE_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.text,\n    User: {\n      id: data.myInfo.id,\n      nickname: data.myInfo.nickname\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: v4(),\n    User: {\n      id: data.myInfo.id,\n      nickname: data.myInfo.nickname\n    },\n    content: data.content\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = false;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = true;\n        draft.addPostLoading = false; // immer 사용\n\n        draft.mainPosts.unshift(dummyPost(action.data)); // immer 사용 X\n        // [dummyPost(action.data), ...state.mainPosts];\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n\n      case DELETE_POST_REQUEST:\n        draft.deletePostLoading = true;\n        break;\n\n      case DELETE_POST_SUCCESS:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (p) {\n          return p.id !== action.data;\n        });\n        break;\n\n      case DELETE_POST_FAILURE:\n        draft.deletePostLoading = false;\n        draft.deletePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        draft.addCommentDone = true;\n        draft.addCommentLoading = false;\n        draft.mainPosts.find(function (p) {\n          return p.id === action.data.postId;\n        }).Comments.unshift(dummyComment(action.data)); //   draft.mainPosts.forEach((post) => {\n        //     if (post.id === action.data.postId) {\n        //       post.Comments.unshift(dummyComment(action.data));\n        //     }\n        //   });\n\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentError = action.error;\n        draft.addCommentLoading = false;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","faker","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","concat","Array","fill","map","id","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","imageUrl","Comments","sentence","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyPost","text","myInfo","dummyComment","reducer","state","action","draft","unshift","error","filter","p","find","postId"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n};\r\n\r\ninitialState.mainPosts = initialState.mainPosts.concat(Array(20).fill().map(() => ({\r\n  id: v4(),\r\n  User: {\r\n    id: v4(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.imageUrl(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: v4(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n})));\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.text,\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = true;\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      draft.mainPosts.find((p) => p.id === action.data.postId)\r\n        .Comments.unshift(dummyComment(action.data));\r\n      //   draft.mainPosts.forEach((post) => {\r\n      //     if (post.id === action.data.postId) {\r\n      //       post.Comments.unshift(dummyComment(action.data));\r\n      //     }\r\n      //   });\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentError = action.error;\r\n      draft.addCommentLoading = false;\r\n      break;\r\n\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}