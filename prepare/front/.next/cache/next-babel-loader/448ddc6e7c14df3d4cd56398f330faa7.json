{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _dummyComment;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://thebook.io/img/covers/cover_080263.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_080233.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_006945.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var addPostRequestAction = {\n  type: ADD_POST_REQUEST\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\nvar dummyPost = {\n  id: 2,\n  content: 'dummyContent',\n  User: {\n    id: 1,\n    nickname: 'dummyUser'\n  },\n  Images: [],\n  Comments: []\n};\nvar dummyComment = (_dummyComment = {\n  User: {\n    nickname: 'user1'\n  },\n  content: 'comment1'\n}, _defineProperty(_dummyComment, \"User\", {\n  nickname: 'user2'\n}), _defineProperty(_dummyComment, \"content\", 'comment2'), _dummyComment);\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        mainPosts: state.mainPosts.map(function (post, idx) {\n          if (post.id === action.payload) {\n            return _objectSpread(_objectSpread({}, state.mainPosts[idx]), {}, {\n              Comments: [dummyComment].concat(_toConsumableArray(state.mainPosts[idx].Comments))\n            });\n          }\n\n          return state.mainPosts[idx];\n        })\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentError: action.error,\n        addCommentLoading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","addPostRequestAction","type","addCommentRequestAction","data","dummyPost","dummyComment","reducer","state","action","error","map","post","idx","payload"],"mappings":"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","sourcesContent":["import { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '찬욱',\r\n            },\r\n            content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n            Images: [\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_080263.jpg',\r\n                },\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_080233.jpg',\r\n                },\r\n                {\r\n                    src: 'https://thebook.io/img/covers/cover_006945.jpg',\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: 'user1',\r\n                    },\r\n                    content: 'comment 1',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user2',\r\n                    },\r\n                    content: 'comment 2',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user3',\r\n                    },\r\n                    content: 'comment 3',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n    imagePaths: [],\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n};\r\n\r\nexport const addPostRequestAction = {\r\n    type: ADD_POST_REQUEST,\r\n};\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: 'dummyContent',\r\n    User: {\r\n        id: 1,\r\n        nickname: 'dummyUser',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    User: {\r\n        nickname: 'user1',\r\n    },\r\n    content: 'comment1',\r\n    User: {\r\n        nickname: 'user2',\r\n    },\r\n    content: 'comment2',\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST_REQUEST:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                addPostLoading: true,\r\n            };\r\n        case ADD_POST_SUCCESS:\r\n            return {\r\n                ...state,\r\n                addPostDone: true,\r\n                addPostLoading: false,\r\n            };\r\n        case ADD_POST_FAILURE:\r\n            return {\r\n                ...state,\r\n                addPostLoading: false,\r\n                addPostError: action.error,\r\n            };\r\n        case ADD_COMMENT_REQUEST:\r\n            return {\r\n                ...state,\r\n                addCommentLoading: true,\r\n                mainPosts: state.mainPosts.map((post, idx) => {\r\n                    if (post.id === action.payload) {\r\n                        return {\r\n                            ...state.mainPosts[idx],\r\n                            Comments: [dummyComment, ...state.mainPosts[idx].Comments],\r\n                        };\r\n                    }\r\n                    return state.mainPosts[idx];\r\n                }),\r\n            };\r\n        case ADD_COMMENT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                addCommentDone: true,\r\n                addCommentLoading: false,\r\n            };\r\n        case ADD_COMMENT_FAILURE:\r\n            return {\r\n                ...state,\r\n                addCommentError: action.error,\r\n                addCommentLoading: false,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}