{"ast":null,"code":"import axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\n\nconst addPostAPI = data => axios.post('/post', data);\n\nfunction* addPost(action) {\n  try {\n    const response = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: response.data.id\n    });\n    yield put({\n      type: REMOVE_IMAGE\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst deletePostAPI = data => axios.delete(`post/${data}`);\n\nfunction* deletePost(action) {\n  try {\n    const response = yield call(deletePostAPI, action.data);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: response.data\n    });\n    yield put({\n      type: DELETE_POST_OF_ME,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst addCommentAPI = data => axios.post(`/post/${data.postId}/comment`, data);\n\nfunction* addComment(action) {\n  try {\n    const response = yield call(addCommentAPI, action.data);\n    console.log(JSON.stringify(response.data));\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst loadPostsAPI = data => axios.get(`/posts?lastId=${data || 0}`);\n\nfunction* loadPosts(action) {\n  try {\n    const response = yield call(loadPostsAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst loadPostAPI = data => axios.get(`/post/${data}`);\n\nfunction* loadPost(action) {\n  try {\n    const response = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst likeAPI = data => axios.patch(`post/${data}/like`);\n\nfunction* like(action) {\n  try {\n    const response = yield call(likeAPI, action.data);\n    yield put({\n      type: LIKE_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LIKE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst unlikeAPI = data => axios.delete(`post/${data}/like`);\n\nfunction* unlike(action) {\n  try {\n    const response = yield call(unlikeAPI, action.data);\n    yield put({\n      type: UNLIKE_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UNLIKE_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst uploadImagesAPI = data => axios.post('/post/images', data);\n\nfunction* uploadImages(action) {\n  try {\n    const response = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst retweetAPI = data => axios.post(`/post/${data}/retweet`);\n\nfunction* retweet(action) {\n  try {\n    const response = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchDeletePost() {\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchLike() {\n  yield takeLatest(LIKE_REQUEST, like);\n}\n\nfunction* watchUnlike() {\n  yield takeLatest(UNLIKE_REQUEST, unlike);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike), fork(watchUploadImages), fork(watchRetweet), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["axios","all","call","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","addPostAPI","data","post","addPost","action","response","type","id","err","error","deletePostAPI","delete","deletePost","addCommentAPI","postId","addComment","console","log","JSON","stringify","loadPostsAPI","get","loadPosts","loadPostAPI","loadPost","likeAPI","patch","like","unlikeAPI","unlike","uploadImagesAPI","uploadImages","retweetAPI","retweet","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","watchLike","watchUnlike","watchUploadImages","watchRetweet","watchLoadPost","watchLoadUserPosts","loadUserPosts","watchLoadHashtagPosts","loadHashtagPosts","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST,\r\n  REMOVE_IMAGE,\r\n  RETWEET_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n} from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', data);\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n    yield put({\r\n      type: REMOVE_IMAGE,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst deletePostAPI = (data) => axios.delete(`post/${data}`);\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const response = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = (data) => axios.get(`/posts?lastId=${data || 0}`);\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const response = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostAPI = (data) => axios.get(`/post/${data}`);\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const response = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst likeAPI = (data) => axios.patch(`post/${data}/like`);\r\n\r\nfunction* like(action) {\r\n  try {\r\n    const response = yield call(likeAPI, action.data);\r\n    yield put({\r\n      type: LIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst unlikeAPI = (data) => axios.delete(`post/${data}/like`);\r\n\r\nfunction* unlike(action) {\r\n  try {\r\n    const response = yield call(unlikeAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst uploadImagesAPI = (data) => axios.post('/post/images', data);\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const response = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst retweetAPI = (data) => axios.post(`/post/${data}/retweet`);\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const response = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLike() {\r\n  yield takeLatest(LIKE_REQUEST, like);\r\n}\r\n\r\nfunction* watchUnlike() {\r\n  yield takeLatest(UNLIKE_REQUEST, unlike);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike),\r\n    fork(watchUploadImages), fork(watchRetweet), fork(watchLoadPost),\r\n    fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}