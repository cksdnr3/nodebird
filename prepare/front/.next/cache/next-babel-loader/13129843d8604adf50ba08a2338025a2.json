{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(logout),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork } from '@redux-saga/core/effects';\nimport axios from 'axios';\nimport { delay, put, takeLatest } from 'redux-saga/effects'; // const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction login(action) {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOGIN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOGIN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction logoutAPI() {\n  return axios.post('api/logout');\n}\n\nfunction logout(action) {\n  return _regeneratorRuntime.wrap(function logout$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: 'LOGOUT_SUCCESS'\n          });\n\n        case 5:\n          _context2.next = 11;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 11;\n          return put({\n            type: 'LOGOUT_FAILURE',\n            data: _context2.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          // while (true) {\n          //     yield take('LOG_IN_REQUEST', login);\n          // }\n          console.log('watchLogin enter');\n          _context3.next = 3;\n          return takeLatest('LOGIN_REQUEST', login);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOGOUT_REQUEST', logout);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogout)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["login","logout","watchLogin","watchLogout","userSaga","all","fork","axios","delay","put","takeLatest","loginAPI","data","post","action","type","response","logoutAPI","console","log"],"mappings":";;oDAUUA,K;qDAoBAC,M;qDAeAC,U;qDAQAC,W;qDAQeC,Q;;AA7DzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,QAAuC,oBAAvC,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOL,KAAK,CAACM,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,SAAUZ,KAAV,CAAgBc,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,eADA;AAENH,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMH,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,eADA;AAENH,YAAAA,IAAI,EAAE,YAAII,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAASK,SAAT,GAAqB;AACjB,SAAOV,KAAK,CAACM,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUZ,MAAV,CAAiBa,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMN,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQQ,iBAAMN,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENH,YAAAA,IAAI,EAAE,aAAII,QAAJ,CAAaJ;AAFb,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AACI;AACA;AACA;AACAgB,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AAJJ;AAKI,iBAAMT,UAAU,CAAC,eAAD,EAAkBV,KAAlB,CAAhB;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAUG,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAKI,iBAAMO,UAAU,CAAC,gBAAD,EAAmBT,MAAnB,CAAhB;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUG,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,EAAmBI,IAAI,CAACH,WAAD,CAAvB,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork } from '@redux-saga/core/effects';\r\nimport axios from 'axios';\r\nimport { delay, put, takeLatest } from 'redux-saga/effects';\r\n\r\n// const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('api/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    // const result = yield call(loginAPI, action.data);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOGIN_SUCCESS',\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOGIN_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('api/logout');\r\n}\r\n\r\nfunction* logout(action) {\r\n    // const result = yield call(logoutAPI);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOGOUT_SUCCESS',\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOGOUT_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // while (true) {\r\n    //     yield take('LOG_IN_REQUEST', login);\r\n    // }\r\n    console.log('watchLogin enter');\r\n    yield takeLatest('LOGIN_REQUEST', login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n    // while (true) {\r\n    //     yield take('LOG_OUT_REQUEST', logout);\r\n    // }\r\n\r\n    yield takeLatest('LOGOUT_REQUEST', logout);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchLogout)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}