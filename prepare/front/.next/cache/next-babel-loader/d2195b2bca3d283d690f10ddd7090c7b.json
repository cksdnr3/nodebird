{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reducer from '../reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from '@redux-saga/core';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/store/ConfigureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","reducer","composeWithDevTools","createSagaMiddleware","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","rootSaga","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,kBAAjC;;AAEA,MAAMC,gBAAgB,GAClB,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KACCC,IAAD,IACCC,MAAD,IAAY;AACRC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CANL;;AAQA,MAAMG,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AACA,QAAMU,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AACA,QAAMU,QAAQ,GAAG,QAAwCf,OAAO,CAACD,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAA/C,GAAmFX,mBAAmB,CAACJ,eAAe,CAAC,GAAGe,WAAJ,CAAhB,CAAvH;AACA,QAAME,KAAK,GAAGf,WAAW,CAACC,OAAD,EAAUa,QAAV,CAAzB;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBC,QAAnB,CAAjB;AACA,SAAOH,KAAP;AACH,CAPD;;AASA,MAAMI,OAAO,GAAGtB,aAAa,CAACc,cAAD,EAAiB;AAC1CS,EAAAA,KAAK;AADqC,CAAjB,CAA7B;AAIA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport reducer from '../reducers';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from '@redux-saga/core';\r\n\r\nconst loggerMiddleware =\r\n    ({ dispatch, getState }) =>\r\n    (next) =>\r\n    (action) => {\r\n        console.log(action);\r\n        return next(action);\r\n    };\r\n\r\nconst configureStore = () => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [sagaMiddleware, loggerMiddleware];\r\n    const enhancer = process.env.NODE_ENV === 'production' ? compose(applyMiddleware(...middlewares)) : composeWithDevTools(applyMiddleware(...middlewares));\r\n    const store = createStore(reducer, enhancer);\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n    debug: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default wrapper;\r\n"]},"metadata":{},"sourceType":"module"}