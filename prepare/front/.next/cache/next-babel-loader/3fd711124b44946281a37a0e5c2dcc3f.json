{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { v4 } from 'uuid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\nimport { dummyPostsGenerator } from '../reducers/post';\n\nconst addPostAPI = () => axios.post('api/add-post');\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    const id = v4();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        myInfo: action.data.myInfo,\n        text: action.data.text\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* deletePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: DELETE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // const addCommentAPI = (data) => axios.post('api/add-comment');\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // const loadPostsAPI = (data) => axios.get('api/posts');\n\n\nfunction* loadPosts() {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: dummyPostsGenerator(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchDeletePost() {\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","throttle","v4","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","dummyPostsGenerator","addPostAPI","post","addPost","action","result","call","data","id","type","myInfo","text","err","error","response","deletePost","addComment","loadPosts","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport { v4 } from 'uuid';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\nimport { dummyPostsGenerator } from '../reducers/post';\r\n\r\nconst addPostAPI = () => axios.post('api/add-post');\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const result = yield call(addPostAPI, action.data);\r\n    const id = v4();\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        myInfo: action.data.myInfo,\r\n        text: action.data.text,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// const addCommentAPI = (data) => axios.post('api/add-comment');\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// const loadPostsAPI = (data) => axios.get('api/posts');\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: dummyPostsGenerator(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}