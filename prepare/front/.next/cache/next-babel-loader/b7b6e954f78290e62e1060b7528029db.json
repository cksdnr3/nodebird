{"ast":null,"code":"import { all, fork } from '@redux-saga/core/effects';\nimport axios from 'axios';\nimport { delay, put, takeLatest } from 'redux-saga/effects';\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_REQUEST, SIGNUP_SUCCESS } from '../reducers/user'; // const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.data);\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGIN_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('api/logout');\n}\n\nfunction* logout(action) {\n  // const result = yield call(logoutAPI);\n  try {\n    yield delay(1000);\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOGOUT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction signupAPI(data) {\n  return axios.post('api/signup', data);\n}\n\nfunction* signup(action) {\n  try {\n    // const result = signupAPI(action.data);\n    yield delay(1000);\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (err) {\n    yield put();\n  }\n}\n\nfunction* watchLogin() {\n  // while (true) {\n  //     yield take('LOG_IN_REQUEST', login);\n  // }\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  // while (true) {\n  //     yield take('LOG_OUT_REQUEST', logout);\n  // }\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","axios","delay","put","takeLatest","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","SIGNUP_REQUEST","SIGNUP_SUCCESS","loginAPI","data","post","login","action","type","err","response","logoutAPI","logout","signupAPI","signup","watchLogin","watchLogout","watchSignup","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,QAAuC,oBAAvC;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,aAAvC,EAAsDC,cAAtD,EAAsEC,cAAtE,EAAsFC,cAAtF,EAAsGC,cAAtG,EAAsHC,cAAtH,QAA4I,kBAA5I,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOb,KAAK,CAACc,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB;AACA,MAAI;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAEX,aADA;AAENO,MAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOK,GAAP,EAAY;AACV,UAAMhB,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAEb,aADA;AAENS,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASO,SAAT,GAAqB;AACjB,SAAOpB,KAAK,CAACc,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUO,MAAV,CAAiBL,MAAjB,EAAyB;AACrB;AACA,MAAI;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAER;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOS,GAAP,EAAY;AACV,UAAMhB,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAEV,cADA;AAENM,MAAAA,IAAI,EAAEK,GAAG,CAACC,QAAJ,CAAaN;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,CAAmBT,IAAnB,EAAyB;AACrB,SAAOb,KAAK,CAACc,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUU,MAAV,CAAiBP,MAAjB,EAAyB;AACrB,MAAI;AACA;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNe,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOO,GAAP,EAAY;AACV,UAAMhB,GAAG,EAAT;AACH;AACJ;;AAED,UAAUsB,UAAV,GAAuB;AACnB;AACA;AACA;AACA,QAAMrB,UAAU,CAACE,aAAD,EAAgBU,KAAhB,CAAhB;AACH;;AAED,UAAUU,WAAV,GAAwB;AACpB;AACA;AACA;AAEA,QAAMtB,UAAU,CAACK,cAAD,EAAiBa,MAAjB,CAAhB;AACH;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAMvB,UAAU,CAACO,cAAD,EAAiBa,MAAjB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAM7B,GAAG,CAAC,CAACC,IAAI,CAACyB,UAAD,CAAL,EAAmBzB,IAAI,CAAC0B,WAAD,CAAvB,EAAsC1B,IAAI,CAAC2B,WAAD,CAA1C,CAAD,CAAT;AACH","sourcesContent":["import { all, fork } from '@redux-saga/core/effects';\r\nimport axios from 'axios';\r\nimport { delay, put, takeLatest } from 'redux-saga/effects';\r\nimport { LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_REQUEST, SIGNUP_SUCCESS } from '../reducers/user';\r\n\r\n// const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('api/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    // const result = yield call(loginAPI, action.data);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOGIN_SUCCESS,\r\n            data: action.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOGIN_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('api/logout');\r\n}\r\n\r\nfunction* logout(action) {\r\n    // const result = yield call(logoutAPI);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOGOUT_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: LOGOUT_FAILURE,\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction signupAPI(data) {\r\n    return axios.post('api/signup', data);\r\n}\r\n\r\nfunction* signup(action) {\r\n    try {\r\n        // const result = signupAPI(action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: SIGNUP_SUCCESS,\r\n        });\r\n    } catch (err) {\r\n        yield put();\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // while (true) {\r\n    //     yield take('LOG_IN_REQUEST', login);\r\n    // }\r\n    yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n    // while (true) {\r\n    //     yield take('LOG_OUT_REQUEST', logout);\r\n    // }\r\n\r\n    yield takeLatest(LOGOUT_REQUEST, logout);\r\n}\r\n\r\nfunction* watchSignup() {\r\n    yield takeLatest(SIGNUP_REQUEST, signup);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}