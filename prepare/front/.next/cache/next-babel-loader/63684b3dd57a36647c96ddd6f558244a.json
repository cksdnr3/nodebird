{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(deletePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(like),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(unlike),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeletePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLike),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlike),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from \"../actions/post\";\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\n\nvar addPostAPI = function addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n};\n\nfunction addPost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: response.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nvar deletePostAPI = function deletePostAPI(data) {\n  return axios[\"delete\"](\"post/\".concat(data));\n};\n\nfunction deletePost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function deletePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(deletePostAPI, action.data);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: DELETE_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: DELETE_POST_OF_ME,\n            data: response.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: DELETE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nvar addCommentAPI = function addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n};\n\nfunction addComment(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          response = _context3.sent;\n          console.log(JSON.stringify(response.data));\n          _context3.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: response.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nvar loadPostsAPI = function loadPostsAPI() {\n  return axios.get('/posts');\n};\n\nfunction loadPosts() {\n  var response;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI);\n\n        case 3:\n          response = _context4.sent;\n          console.log(JSON.stringify(response.data));\n          _context4.next = 7;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 7:\n          _context4.next = 13;\n          break;\n\n        case 9:\n          _context4.prev = 9;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 9]]);\n}\n\nvar likeAPI = function likeAPI(data) {\n  return axios.patch(\"post/\".concat(data, \"/like\"));\n};\n\nfunction like(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function like$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(likeAPI, action.data);\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LIKE_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LIKE_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nvar unlikeAPI = function unlikeAPI(data) {\n  return axios[\"delete\"](\"post/\".concat(data, \"/like\"));\n};\n\nfunction unlike(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function unlike$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(unlikeAPI, action.data);\n\n        case 3:\n          response = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: UNLIKE_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: UNLIKE_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nvar uploadImagesAPI = function uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n};\n\nfunction uploadImages(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          response = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nfunction watchDeletePost() {\n  return _regeneratorRuntime.wrap(function watchDeletePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return takeLatest(DELETE_POST_REQUEST, deletePost);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return throttle(5000, LOAD_POST_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11);\n}\n\nfunction watchLike() {\n  return _regeneratorRuntime.wrap(function watchLike$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LIKE_REQUEST, like);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchUnlike() {\n  return _regeneratorRuntime.wrap(function watchUnlike$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(UNLIKE_REQUEST, unlike);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["addPost","deletePost","addComment","loadPosts","like","unlike","uploadImages","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","watchLike","watchUnlike","watchUploadImages","postSaga","axios","all","call","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","addPostAPI","data","post","content","action","response","type","id","error","deletePostAPI","addCommentAPI","postId","console","log","JSON","stringify","loadPostsAPI","get","likeAPI","patch","unlikeAPI","uploadImagesAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS, UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS\r\n} from \"../actions/post\";\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', { content: data });\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst deletePostAPI = (data) => axios.delete(`post/${data}`);\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const response = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = () => axios.get('/posts');\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    const response = yield call(loadPostsAPI);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst likeAPI = (data) => axios.patch(`post/${data}/like`);\r\n\r\nfunction* like(action) {\r\n  try {\r\n    const response = yield call(likeAPI, action.data);\r\n    yield put({\r\n      type: LIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst unlikeAPI = (data) => axios.delete(`post/${data}/like`);\r\n\r\nfunction* unlike(action) {\r\n  try {\r\n    const response = yield call(unlikeAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst uploadImagesAPI = (data) => axios.post('/post/images', data);\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const response = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLike() {\r\n  yield takeLatest(LIKE_REQUEST, like);\r\n}\r\n\r\nfunction* watchUnlike() {\r\n  yield takeLatest(UNLIKE_REQUEST, unlike);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike),\r\n    fork(watchUploadImages)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}