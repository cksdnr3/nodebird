{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 } from 'uuid';\nimport produce from 'immer';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\nexport const initialState = {\n  mainPosts: [{\n    id: v4(),\n    User: {\n      id: v4(),\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://thebook.io/img/covers/cover_080263.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_080233.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_006945.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null\n};\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const deletePostRequestAction = data => ({\n  type: DELETE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.text,\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: v4(),\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  content: data.content\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = true;\n      draft.addPostLoading = false;\n      draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case DELETE_POST_REQUEST:\n      draft.deletePostLoading = true;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        deletePostLoading: true\n      });\n\n    case DELETE_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        deletePostLoading: false,\n        deletePostDone: true,\n        mainPosts: state.mainPosts.filter(p => p.id !== action.data)\n      });\n\n    case DELETE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        deletePostLoading: false,\n        deletePostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false,\n        mainPosts: state.mainPosts.map(post => {\n          if (post.id === action.data.postId) {\n            return _objectSpread(_objectSpread({}, post), {}, {\n              Comments: [dummyComment(action.data), ...post.Comments]\n            });\n          }\n\n          return post;\n        })\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentError: action.error,\n        addCommentLoading: false\n      });\n\n    default:\n      return state;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyPost","text","myInfo","dummyComment","reducer","state","action","draft","error","filter","p","map","post","postId"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: v4(),\r\n      User: {\r\n        id: v4(),\r\n        nickname: '찬욱',\r\n      },\r\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n      Images: [\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080263.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080233.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_006945.jpg',\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: 'user1',\r\n          },\r\n          content: 'comment 1',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user2',\r\n          },\r\n          content: 'comment 2',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user3',\r\n          },\r\n          content: 'comment 3',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.text,\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = true;\r\n      draft.addPostLoading = false;\r\n      draft.mainPosts = [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      return {\r\n        ...state,\r\n        deletePostLoading: true,\r\n      };\r\n    case DELETE_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        deletePostLoading: false,\r\n        deletePostDone: true,\r\n        mainPosts: state.mainPosts.filter((p) => p.id !== action.data),\r\n      };\r\n    case DELETE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        deletePostLoading: false,\r\n        deletePostError: action.error,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addCommentDone: true,\r\n        addCommentLoading: false,\r\n        mainPosts: state.mainPosts.map((post) => {\r\n          if (post.id === action.data.postId) {\r\n            return {\r\n              ...post,\r\n              Comments: [dummyComment(action.data), ...post.Comments],\r\n            };\r\n          }\r\n          return post;\r\n        }),\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentError: action.error,\r\n        addCommentLoading: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}