{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://thebook.io/img/covers/cover_080263.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_080233.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_006945.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n}; // const dummyPost = {\n//   id: 2,\n//   content: 'dummyContent',\n//   User: {\n//     id: 1,\n//     nickname: 'dummyUser',\n//   },\n//   Images: [],\n//   Comments: [],\n// };\n\nvar dummyComment = [{\n  User: {\n    nickname: 'user1'\n  },\n  content: 'comment1'\n}, {\n  User: {\n    nickname: 'user2'\n  },\n  content: 'comment2'\n}];\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: true\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostDone: true,\n        addPostLoading: false\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        mainPosts: state.mainPosts.map(function (post, idx) {\n          if (post.id === action.payload) {\n            return _objectSpread(_objectSpread({}, state.mainPosts[idx]), {}, {\n              Comments: [dummyComment].concat(_toConsumableArray(state.mainPosts[idx].Comments))\n            });\n          }\n\n          return state.mainPosts[idx];\n        })\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        addCommentLoading: false\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentError: action.error,\n        addCommentLoading: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","addPostRequestAction","data","type","addCommentRequestAction","dummyComment","reducer","state","action","error","map","post","idx","payload"],"mappings":"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","sourcesContent":["import { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: '찬욱',\r\n      },\r\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n      Images: [\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080263.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080233.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_006945.jpg',\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: 'user1',\r\n          },\r\n          content: 'comment 1',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user2',\r\n          },\r\n          content: 'comment 2',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user3',\r\n          },\r\n          content: 'comment 3',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\n// const dummyPost = {\r\n//   id: 2,\r\n//   content: 'dummyContent',\r\n//   User: {\r\n//     id: 1,\r\n//     nickname: 'dummyUser',\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// };\r\n\r\nconst dummyComment = [\r\n  {\r\n    User: {\r\n      nickname: 'user1',\r\n    },\r\n    content: 'comment1',\r\n  }, {\r\n    User: {\r\n      nickname: 'user2',\r\n    },\r\n    content: 'comment2',\r\n  },\r\n];\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        mainPosts: [action.data, ...state.mainPosts],\r\n        addPostLoading: true,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addPostDone: true,\r\n        addPostLoading: false,\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        mainPosts: state.mainPosts.map((post, idx) => {\r\n          if (post.id === action.payload) {\r\n            return {\r\n              ...state.mainPosts[idx],\r\n              Comments: [dummyComment, ...state.mainPosts[idx].Comments],\r\n            };\r\n          }\r\n          return state.mainPosts[idx];\r\n        }),\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addCommentDone: true,\r\n        addCommentLoading: false,\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentError: action.error,\r\n        addCommentLoading: false,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}