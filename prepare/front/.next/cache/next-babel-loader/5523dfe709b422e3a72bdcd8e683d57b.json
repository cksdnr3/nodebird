{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: '../asset/imgs/cs.jpg'\n    }, {\n      src: '../asset/imgs/download.jpg'\n    }, {\n      src: '../asset/imgs/download.png'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  postAdded: false\n};\nvar ADD_POST = 'ADD_POST';\nexport var addPost = {\n  type: ADD_POST\n};\nvar ADD_COMMENT = 'ADD_COMMENT';\nexport var addComment = {\n  type: ADD_COMMENT\n};\nvar dummyPost = {\n  id: 2,\n  content: 'dummyContent',\n  User: {\n    id: 1,\n    nickname: 'dummyUser'\n  },\n  Images: [],\n  Comments: []\n};\nvar dummyComment = {\n  User: {\n    nickname: 'user1'\n  },\n  content: 'comment1'\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost].concat(_toConsumableArray(state.mainPosts)),\n        postAdded: true\n      });\n\n    case ADD_COMMENT:\n      {\n        action.payload;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: state.mainPosts.map(function (post, idx) {\n            if (post.id === action.payload) {\n              return _objectSpread(_objectSpread({}, state.mainPosts[action.payload]), {}, {\n                Comments: [dummyComment].concat(_toConsumableArray(state.mainPosts[action.payload].Comments))\n              });\n            }\n\n            return state.mainPosts[idx];\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["HYDRATE","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","postAdded","ADD_POST","addPost","type","ADD_COMMENT","addComment","dummyPost","dummyComment","reducer","state","action","payload","map","post","idx"],"mappings":";;;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAO,IAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,CACP;AACIC,IAAAA,EAAE,EAAE,CADR;AAEIC,IAAAA,IAAI,EAAE;AACFD,MAAAA,EAAE,EAAE,CADF;AAEFE,MAAAA,QAAQ,EAAE;AAFR,KAFV;AAMIC,IAAAA,OAAO,EAAE,uBANb;AAOIC,IAAAA,MAAM,EAAE,CACJ;AACIC,MAAAA,GAAG,EAAE;AADT,KADI,EAIJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAJI,EAOJ;AACIA,MAAAA,GAAG,EAAE;AADT,KAPI,CAPZ;AAkBIC,IAAAA,QAAQ,EAAE,CACN;AACIL,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KADM,EAON;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAPM,EAaN;AACIF,MAAAA,IAAI,EAAE;AACFC,QAAAA,QAAQ,EAAE;AADR,OADV;AAIIC,MAAAA,OAAO,EAAE;AAJb,KAbM;AAlBd,GADO,CADa;AA0CxBI,EAAAA,UAAU,EAAE,EA1CY;AA2CxBC,EAAAA,SAAS,EAAE;AA3Ca,CAArB;AA8CP,IAAMC,QAAQ,GAAG,UAAjB;AACA,OAAO,IAAMC,OAAO,GAAG;AACnBC,EAAAA,IAAI,EAAEF;AADa,CAAhB;AAIP,IAAMG,WAAW,GAAG,aAApB;AACA,OAAO,IAAMC,UAAU,GAAG;AACtBF,EAAAA,IAAI,EAAEC;AADgB,CAAnB;AAIP,IAAME,SAAS,GAAG;AACdd,EAAAA,EAAE,EAAE,CADU;AAEdG,EAAAA,OAAO,EAAE,cAFK;AAGdF,EAAAA,IAAI,EAAE;AACFD,IAAAA,EAAE,EAAE,CADF;AAEFE,IAAAA,QAAQ,EAAE;AAFR,GAHQ;AAOdE,EAAAA,MAAM,EAAE,EAPM;AAQdE,EAAAA,QAAQ,EAAE;AARI,CAAlB;AAWA,IAAMS,YAAY,GAAG;AACjBd,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE;AADR,GADW;AAIjBC,EAAAA,OAAO,EAAE;AAJQ,CAArB;;AAOA,IAAMa,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBnB,YAAyB;AAAA,MAAXoB,MAAW;;AAC9C,UAAQA,MAAM,CAACP,IAAf;AACI,SAAKF,QAAL;AACI,6CACOQ,KADP;AAEIlB,QAAAA,SAAS,GAAGe,SAAH,4BAAiBG,KAAK,CAAClB,SAAvB,EAFb;AAGIS,QAAAA,SAAS,EAAE;AAHf;;AAKJ,SAAKI,WAAL;AAAkB;AACdM,QAAAA,MAAM,CAACC,OAAP;AACA,+CACOF,KADP;AAEIlB,UAAAA,SAAS,EAAEkB,KAAK,CAAClB,SAAN,CAAgBqB,GAAhB,CAAoB,UAACC,IAAD,EAAOC,GAAP,EAAe;AAC1C,gBAAID,IAAI,CAACrB,EAAL,KAAYkB,MAAM,CAACC,OAAvB,EAAgC;AAC5B,qDACOF,KAAK,CAAClB,SAAN,CAAgBmB,MAAM,CAACC,OAAvB,CADP;AAEIb,gBAAAA,QAAQ,GAAGS,YAAH,4BAAoBE,KAAK,CAAClB,SAAN,CAAgBmB,MAAM,CAACC,OAAvB,EAAgCb,QAApD;AAFZ;AAIH;;AACD,mBAAOW,KAAK,CAAClB,SAAN,CAAgBuB,GAAhB,CAAP;AACH,WARU;AAFf;AAYH;;AACD;AACI,aAAOL,KAAP;AAvBR;AAyBH,CA1BD;;AA4BA,eAAeD,OAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\nexport const initialState = {\r\n    mainPosts: [\r\n        {\r\n            id: 1,\r\n            User: {\r\n                id: 1,\r\n                nickname: '찬욱',\r\n            },\r\n            content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n            Images: [\r\n                {\r\n                    src: '../asset/imgs/cs.jpg',\r\n                },\r\n                {\r\n                    src: '../asset/imgs/download.jpg',\r\n                },\r\n                {\r\n                    src: '../asset/imgs/download.png',\r\n                },\r\n            ],\r\n            Comments: [\r\n                {\r\n                    User: {\r\n                        nickname: 'user1',\r\n                    },\r\n                    content: 'comment 1',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user2',\r\n                    },\r\n                    content: 'comment 2',\r\n                },\r\n                {\r\n                    User: {\r\n                        nickname: 'user3',\r\n                    },\r\n                    content: 'comment 3',\r\n                },\r\n            ],\r\n        },\r\n    ],\r\n    imagePaths: [],\r\n    postAdded: false,\r\n};\r\n\r\nconst ADD_POST = 'ADD_POST';\r\nexport const addPost = {\r\n    type: ADD_POST,\r\n};\r\n\r\nconst ADD_COMMENT = 'ADD_COMMENT';\r\nexport const addComment = {\r\n    type: ADD_COMMENT,\r\n};\r\n\r\nconst dummyPost = {\r\n    id: 2,\r\n    content: 'dummyContent',\r\n    User: {\r\n        id: 1,\r\n        nickname: 'dummyUser',\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n};\r\n\r\nconst dummyComment = {\r\n    User: {\r\n        nickname: 'user1',\r\n    },\r\n    content: 'comment1',\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            return {\r\n                ...state,\r\n                mainPosts: [dummyPost, ...state.mainPosts],\r\n                postAdded: true,\r\n            };\r\n        case ADD_COMMENT: {\r\n            action.payload;\r\n            return {\r\n                ...state,\r\n                mainPosts: state.mainPosts.map((post, idx) => {\r\n                    if (post.id === action.payload) {\r\n                        return {\r\n                            ...state.mainPosts[action.payload],\r\n                            Comments: [dummyComment, ...state.mainPosts[action.payload].Comments],\r\n                        };\r\n                    }\r\n                    return state.mainPosts[idx];\r\n                }),\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}