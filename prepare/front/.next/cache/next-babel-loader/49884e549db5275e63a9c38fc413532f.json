{"ast":null,"code":"import { v4 } from 'uuid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\nexport const initialState = {\n  mainPosts: dummyPostsGenerator(10),\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null\n};\nexport const dummyPostsGenerator = number => Array(number).fill().map(() => ({\n  id: v4(),\n  User: {\n    id: v4(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: v4(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const deletePostRequestAction = data => ({\n  type: DELETE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.text,\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: v4(),\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  content: data.content\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = true;\n      draft.addPostLoading = false; // immer 사용\n\n      draft.mainPosts.unshift(dummyPost(action.data)); // immer 사용 X\n      // [dummyPost(action.data), ...state.mainPosts];\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case DELETE_POST_REQUEST:\n      draft.deletePostLoading = true;\n      break;\n\n    case DELETE_POST_SUCCESS:\n      draft.deletePostLoading = false;\n      draft.deletePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(p => p.id !== action.data);\n      break;\n\n    case DELETE_POST_FAILURE:\n      draft.deletePostLoading = false;\n      draft.deletePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      draft.mainPosts.find(p => p.id === action.data.postId).Comments.unshift(dummyComment(action.data)); //   draft.mainPosts.forEach((post) => {\n      //     if (post.id === action.data.postId) {\n      //       post.Comments.unshift(dummyComment(action.data));\n      //     }\n      //   });\n\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentError = action.error;\n      draft.addCommentLoading = false;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","faker","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","initialState","mainPosts","dummyPostsGenerator","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","number","Array","fill","map","id","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyPost","text","myInfo","dummyComment","reducer","state","action","draft","unshift","error","filter","p","find","postId"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: dummyPostsGenerator(10),\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n};\r\n\r\nexport const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n  id: v4(),\r\n  User: {\r\n    id: v4(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: v4(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.text,\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = true;\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      draft.mainPosts.find((p) => p.id === action.data.postId)\r\n        .Comments.unshift(dummyComment(action.data));\r\n      //   draft.mainPosts.forEach((post) => {\r\n      //     if (post.id === action.data.postId) {\r\n      //       post.Comments.unshift(dummyComment(action.data));\r\n      //     }\r\n      //   });\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentError = action.error;\r\n      draft.addCommentLoading = false;\r\n      break;\r\n\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}