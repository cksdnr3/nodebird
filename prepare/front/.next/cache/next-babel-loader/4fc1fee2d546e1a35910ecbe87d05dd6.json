{"ast":null,"code":"import { v4 } from 'uuid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\nexport const initialState = {\n  mainPosts: [{\n    id: v4(),\n    User: {\n      id: v4(),\n      nickname: '찬욱'\n    },\n    content: '첫 번째 게시글 #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://thebook.io/img/covers/cover_080263.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_080233.jpg'\n    }, {\n      src: 'https://thebook.io/img/covers/cover_006945.jpg'\n    }],\n    Comments: [{\n      User: {\n        nickname: 'user1'\n      },\n      content: 'comment 1'\n    }, {\n      User: {\n        nickname: 'user2'\n      },\n      content: 'comment 2'\n    }, {\n      User: {\n        nickname: 'user3'\n      },\n      content: 'comment 3'\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => ({\n  id: v4(),\n  User: {\n    id: v4(),\n    nickname: faker.name.findName()\n  },\n  content: faker.name.findName(),\n  Images: [],\n  Comments: []\n})));\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const deletePostRequestAction = data => ({\n  type: DELETE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.text,\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: v4(),\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  content: data.content\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = true;\n      draft.addPostLoading = false; // immer 사용\n\n      draft.mainPosts.unshift(dummyPost(action.data)); // immer 사용 X\n      // [dummyPost(action.data), ...state.mainPosts];\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case DELETE_POST_REQUEST:\n      draft.deletePostLoading = true;\n      break;\n\n    case DELETE_POST_SUCCESS:\n      draft.deletePostLoading = false;\n      draft.deletePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(p => p.id !== action.data);\n      break;\n\n    case DELETE_POST_FAILURE:\n      draft.deletePostLoading = false;\n      draft.deletePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      draft.mainPosts.find(p => p.id === action.data.postId).Comments.unshift(dummyComment(action.data)); //   draft.mainPosts.forEach((post) => {\n      //     if (post.id === action.data.postId) {\n      //       post.Comments.unshift(dummyComment(action.data));\n      //     }\n      //   });\n\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentError = action.error;\n      draft.addCommentLoading = false;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","faker","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","concat","Array","fill","map","v","i","name","findName","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyPost","text","myInfo","dummyComment","reducer","state","action","draft","unshift","error","filter","p","find","postId"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: v4(),\r\n      User: {\r\n        id: v4(),\r\n        nickname: '찬욱',\r\n      },\r\n      content: '첫 번째 게시글 #해시태그 #익스프레스',\r\n      Images: [\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080263.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_080233.jpg',\r\n        },\r\n        {\r\n          src: 'https://thebook.io/img/covers/cover_006945.jpg',\r\n        },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: 'user1',\r\n          },\r\n          content: 'comment 1',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user2',\r\n          },\r\n          content: 'comment 2',\r\n        },\r\n        {\r\n          User: {\r\n            nickname: 'user3',\r\n          },\r\n          content: 'comment 3',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n};\r\n\r\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: v4(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.name.findName(),\r\n  Images: [],\r\n  Comments: [],\r\n})));\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.text,\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = true;\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      draft.mainPosts.find((p) => p.id === action.data.postId)\r\n        .Comments.unshift(dummyComment(action.data));\r\n      //   draft.mainPosts.forEach((post) => {\r\n      //     if (post.id === action.data.postId) {\r\n      //       post.Comments.unshift(dummyComment(action.data));\r\n      //     }\r\n      //   });\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.addCommentError = action.error;\r\n      draft.addCommentLoading = false;\r\n      break;\r\n\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}