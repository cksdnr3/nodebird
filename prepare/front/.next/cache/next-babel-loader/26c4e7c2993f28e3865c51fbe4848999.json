{"ast":null,"code":"import axios from 'axios';\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\n\nfunction addPostAPI() {\n  return axios.post('api/add-post');\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: 'dummy'\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* addComment(action) {\n  try {\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: 'dummy'\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["axios","all","delay","fork","put","takeLatest","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","addPostAPI","post","addPost","action","type","data","err","error","response","addComment","watchAddPost","watchAddComment","postSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,gBAAnD,EAAqEC,gBAArE,EAAuFC,gBAAvF,QAA+G,iBAA/G;;AAEA,SAASC,UAAT,GAAsB;AAClB,SAAOX,KAAK,CAACY,IAAN,CAAW,cAAX,CAAP;AACH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMZ,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEL,gBADA;AAENM,MAAAA,IAAI,EAAE;AAFA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACV,UAAMb,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEP,gBADA;AAENU,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,CAAqBN,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMV,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAEL,gBADA;AAENM,MAAAA,IAAI,EAAE;AAFA,KAAD,CAAT;AAIH,GALD,CAKE,OAAOC,GAAP,EAAY;AACV,UAAMb,GAAG,CAAC;AACNW,MAAAA,IAAI,EAAET,mBADA;AAENY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUK,YAAV,GAAyB;AACrB;AACA;AACA;AAEA,QAAMhB,UAAU,CAACI,gBAAD,EAAmBI,OAAnB,CAAhB;AACH;;AAED,UAAUS,eAAV,GAA4B;AACxB,QAAMjB,UAAU,CAACE,mBAAD,EAAsBa,UAAtB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMtB,GAAG,CAAC,CAACE,IAAI,CAACkB,YAAD,CAAL,CAAD,CAAT;AACH","sourcesContent":["import axios from 'axios';\r\nimport { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS } from '../actions/post';\r\n\r\nfunction addPostAPI() {\r\n    return axios.post('api/add-post');\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        // const result = yield call(addPostAPI, action.data);\r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: 'dummy',\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        yield put({\r\n            type: ADD_POST_SUCCESS,\r\n            data: 'dummy',\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    // while (true) {\r\n    //     yield take('ADD_POST_REQUEST', addPost);\r\n    // }\r\n\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([fork(watchAddPost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}