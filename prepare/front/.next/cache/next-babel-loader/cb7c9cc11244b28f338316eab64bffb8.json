{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(deletePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(like),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unlike),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeletePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLike),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlike),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\n\nvar addPostAPI = function addPostAPI(data) {\n  return axios.post('/post', data);\n};\n\nfunction addPost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: response.data.id\n          });\n\n        case 8:\n          _context.next = 10;\n          return put({\n            type: REMOVE_IMAGE\n          });\n\n        case 10:\n          _context.next = 16;\n          break;\n\n        case 12:\n          _context.prev = 12;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 16;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 12]]);\n}\n\nvar deletePostAPI = function deletePostAPI(data) {\n  return axios[\"delete\"](\"post/\".concat(data));\n};\n\nfunction deletePost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function deletePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(deletePostAPI, action.data);\n\n        case 3:\n          response = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: DELETE_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: DELETE_POST_OF_ME,\n            data: response.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: DELETE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nvar addCommentAPI = function addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n};\n\nfunction addComment(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          response = _context3.sent;\n          console.log(JSON.stringify(response.data));\n          _context3.next = 7;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: response.data\n          });\n\n        case 7:\n          _context3.next = 14;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 14;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n}\n\nvar loadPostsAPI = function loadPostsAPI(data) {\n  return axios.get(\"/posts?lastId=\".concat(data || 0));\n};\n\nfunction loadPosts(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI, action.data);\n\n        case 3:\n          response = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nvar loadPostAPI = function loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data));\n};\n\nfunction loadPost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function loadPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nvar likeAPI = function likeAPI(data) {\n  return axios.patch(\"post/\".concat(data, \"/like\"));\n};\n\nfunction like(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function like$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(likeAPI, action.data);\n\n        case 3:\n          response = _context6.sent;\n          _context6.next = 6;\n          return put({\n            type: LIKE_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LIKE_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nvar unlikeAPI = function unlikeAPI(data) {\n  return axios[\"delete\"](\"post/\".concat(data, \"/like\"));\n};\n\nfunction unlike(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function unlike$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(unlikeAPI, action.data);\n\n        case 3:\n          response = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UNLIKE_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UNLIKE_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nvar uploadImagesAPI = function uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n};\n\nfunction uploadImages(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          response = _context8.sent;\n          _context8.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nvar retweetAPI = function retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n};\n\nfunction retweet(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function retweet$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          response = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nvar loadUserPostsAPI = function loadUserPostsAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n};\n\nfunction loadUserPosts(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          response = _context10.sent;\n          _context10.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context10.next = 13;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          console.error(_context10.t0);\n          _context10.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nvar loadHashtagPostsAPI = function loadHashtagPostsAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n};\n\nfunction loadHashtagPosts(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          response = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n}\n\nfunction watchDeletePost() {\n  return _regeneratorRuntime.wrap(function watchDeletePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return takeLatest(DELETE_POST_REQUEST, deletePost);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15);\n}\n\nfunction watchLike() {\n  return _regeneratorRuntime.wrap(function watchLike$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_REQUEST, like);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nfunction watchUnlike() {\n  return _regeneratorRuntime.wrap(function watchUnlike$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return takeLatest(UNLIKE_REQUEST, unlike);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike), fork(watchUploadImages), fork(watchRetweet), fork(watchLoadPost), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["addPost","deletePost","addComment","loadPosts","loadPost","like","unlike","uploadImages","retweet","loadUserPosts","loadHashtagPosts","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","watchLike","watchUnlike","watchUploadImages","watchRetweet","watchLoadPost","watchLoadUserPosts","watchLoadHashtagPosts","postSaga","axios","all","call","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","addPostAPI","data","post","action","response","type","id","error","deletePostAPI","addCommentAPI","postId","console","log","JSON","stringify","loadPostsAPI","get","loadPostAPI","likeAPI","patch","unlikeAPI","uploadImagesAPI","retweetAPI","loadUserPostsAPI","loadHashtagPostsAPI"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS,\r\n  REMOVE_IMAGE,\r\n  RETWEET_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n} from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', data);\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n    yield put({\r\n      type: REMOVE_IMAGE,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst deletePostAPI = (data) => axios.delete(`post/${data}`);\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    const response = yield call(deletePostAPI, action.data);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    console.log(JSON.stringify(response.data));\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = (data) => axios.get(`/posts?lastId=${data || 0}`);\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    const response = yield call(loadPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POSTS_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostAPI = (data) => axios.get(`/post/${data}`);\r\n\r\nfunction* loadPost(action) {\r\n  try {\r\n    const response = yield call(loadPostAPI, action.data);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst likeAPI = (data) => axios.patch(`post/${data}/like`);\r\n\r\nfunction* like(action) {\r\n  try {\r\n    const response = yield call(likeAPI, action.data);\r\n    yield put({\r\n      type: LIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst unlikeAPI = (data) => axios.delete(`post/${data}/like`);\r\n\r\nfunction* unlike(action) {\r\n  try {\r\n    const response = yield call(unlikeAPI, action.data);\r\n    yield put({\r\n      type: UNLIKE_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UNLIKE_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst uploadImagesAPI = (data) => axios.post('/post/images', data);\r\n\r\nfunction* uploadImages(action) {\r\n  try {\r\n    const response = yield call(uploadImagesAPI, action.data);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: UPLOAD_IMAGES_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst retweetAPI = (data) => axios.post(`/post/${data}/retweet`);\r\n\r\nfunction* retweet(action) {\r\n  try {\r\n    const response = yield call(retweetAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadUserPostsAPI = (data) => axios.post(`/post/${data}/retweet`);\r\n\r\nfunction* loadUserPosts(action) {\r\n  try {\r\n    const response = yield call(loadUserPostsAPI, action.data);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: LOAD_USER_POSTS_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadHashtagPostsAPI = (data) => axios.post(`/post/${data}/retweet`);\r\n\r\nfunction* loadHashtagPosts(action) {\r\n  try {\r\n    const response = yield call(loadHashtagPostsAPI, action.data);\r\n    yield put({\r\n      type: RETWEET_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    console.error(err);\r\n    yield put({\r\n      type: RETWEET_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\r\n}\r\n\r\nfunction* watchLike() {\r\n  yield takeLatest(LIKE_REQUEST, like);\r\n}\r\n\r\nfunction* watchUnlike() {\r\n  yield takeLatest(UNLIKE_REQUEST, unlike);\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction* watchRetweet() {\r\n  yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts), fork(watchLike), fork(watchUnlike),\r\n    fork(watchUploadImages), fork(watchRetweet), fork(watchLoadPost),\r\n    fork(watchLoadUserPosts), fork(watchLoadHashtagPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}