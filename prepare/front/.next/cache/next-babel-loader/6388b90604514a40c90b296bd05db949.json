{"ast":null,"code":"import { all, call, fork } from '@redux-saga/core/effects';\nimport { put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { CHANGE_NICKNAME_REQUEST, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE, LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_FAILURE, SIGNUP_REQUEST, SIGNUP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from '../actions/user';\n\nconst loginAPI = data => axios.post('/user/login', data);\n\nfunction* login(action) {\n  try {\n    const response = yield call(loginAPI, action.data);\n    yield put({\n      type: LOGIN_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGIN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst logoutAPI = () => axios.post('/user/logout');\n\nfunction* logout() {\n  const response = yield call(logoutAPI);\n\n  try {\n    yield put({\n      type: LOGOUT_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOGOUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst signupAPI = data => axios.post('/user', data);\n\nfunction* signup(action) {\n  try {\n    yield call(signupAPI, action.data);\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGNUP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* follow(action) {\n  try {\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* unfollow(action) {\n  try {\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst loadMyInfoAPI = () => axios.get('/user');\n\nfunction* loadMyInfo() {\n  try {\n    const response = yield call(loadMyInfoAPI);\n    console.log(response);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nconst changeNicknameAPI = () => axios.patch('/user');\n\nfunction* changeNickname() {\n  try {\n    const response = yield call(changeNicknameAPI);\n    console.log(response);\n    yield put({\n      type: LOAD_MY_INFO_SUCCESS,\n      data: response.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_MY_INFO_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // while (true) {\n  //     yield take('LOG_IN_REQUEST', login);\n  // }\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n\nfunction* watchLogout() {\n  yield takeLatest(LOGOUT_REQUEST, logout);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nfunction* watchSignup() {\n  yield takeLatest(SIGNUP_REQUEST, signup);\n}\n\nfunction* watchLoadMyInfo() {\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\n}\n\nfunction* watchChangeNickname() {\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchSignup), fork(watchFollow), fork(watchUnfollow), fork(watchLoadMyInfo), fork(watchChangeNickname)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["all","call","fork","put","takeLatest","axios","CHANGE_NICKNAME_REQUEST","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOAD_MY_INFO_FAILURE","LOAD_MY_INFO_REQUEST","LOAD_MY_INFO_SUCCESS","LOGIN_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGOUT_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","SIGNUP_FAILURE","SIGNUP_REQUEST","SIGNUP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","loginAPI","data","post","login","action","response","type","err","error","logoutAPI","logout","signupAPI","signup","follow","unfollow","loadMyInfoAPI","get","loadMyInfo","console","log","changeNicknameAPI","patch","changeNickname","watchLogin","watchLogout","watchFollow","watchUnfollow","watchSignup","watchLoadMyInfo","watchChangeNickname","userSaga"],"mappings":"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","sourcesContent":["import { all, call, fork } from '@redux-saga/core/effects';\r\nimport { put, takeLatest } from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport {\r\n  CHANGE_NICKNAME_REQUEST, FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOAD_MY_INFO_FAILURE,\r\n  LOAD_MY_INFO_REQUEST, LOAD_MY_INFO_SUCCESS, LOGIN_FAILURE, LOGIN_REQUEST,\r\n  LOGIN_SUCCESS, LOGOUT_FAILURE, LOGOUT_REQUEST, LOGOUT_SUCCESS, SIGNUP_FAILURE, SIGNUP_REQUEST,\r\n  SIGNUP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS,\r\n} from '../actions/user';\r\n\r\nconst loginAPI = (data) => axios.post('/user/login', data);\r\n\r\nfunction* login(action) {\r\n  try {\r\n    const response = yield call(loginAPI, action.data);\r\n    yield put({\r\n      type: LOGIN_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOGIN_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst logoutAPI = () => axios.post('/user/logout');\r\n\r\nfunction* logout() {\r\n  const response = yield call(logoutAPI);\r\n  try {\r\n    yield put({\r\n      type: LOGOUT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOGOUT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst signupAPI = (data) => axios.post('/user', data);\r\n\r\nfunction* signup(action) {\r\n  try {\r\n    yield call(signupAPI, action.data);\r\n    yield put({\r\n      type: SIGNUP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: SIGNUP_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\nfunction* unfollow(action) {\r\n  try {\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadMyInfoAPI = () => axios.get('/user');\r\n\r\nfunction* loadMyInfo() {\r\n  try {\r\n    const response = yield call(loadMyInfoAPI);\r\n    console.log(response);\r\n    yield put({\r\n      type: LOAD_MY_INFO_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_MY_INFO_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst changeNicknameAPI = () => axios.patch('/user');\r\n\r\nfunction* changeNickname() {\r\n  try {\r\n    const response = yield call(changeNicknameAPI);\r\n    console.log(response);\r\n    yield put({\r\n      type: LOAD_MY_INFO_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_MY_INFO_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  // while (true) {\r\n  //     yield take('LOG_IN_REQUEST', login);\r\n  // }\r\n  yield takeLatest(LOGIN_REQUEST, login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n  yield takeLatest(LOGOUT_REQUEST, logout);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nfunction* watchSignup() {\r\n  yield takeLatest(SIGNUP_REQUEST, signup);\r\n}\r\n\r\nfunction* watchLoadMyInfo() {\r\n  yield takeLatest(LOAD_MY_INFO_REQUEST, loadMyInfo);\r\n}\r\n\r\nfunction* watchChangeNickname() {\r\n  yield takeLatest(CHANGE_NICKNAME_REQUEST, changeNickname);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogout),\r\n    fork(watchSignup), fork(watchFollow), fork(watchUnfollow), fork(watchLoadMyInfo), fork(watchChangeNickname)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}