{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\nimport { v4 } from 'uuid';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\nimport { dummyPostsGenerator } from '../reducers/post'; // const addPostAPI = () => axios.post('api/add-post');\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    const id = v4();\n    yield delay(1000);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        myInfo: action.data.myInfo,\n        text: action.data.text\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* deletePost(action) {\n  try {\n    yield delay(1000);\n    yield put({\n      type: DELETE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: DELETE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: DELETE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n} // const addCommentAPI = (data) => axios.post('api/add-comment');\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n} // const loadPostsAPI = (data) => axios.get('api/posts');\n\n\nfunction* loadPosts(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: dummyPostsGenerator(10)\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  // while (true) {\n  //     yield take('ADD_POST_REQUEST', addPost);\n  // }\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchDeletePost() {\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPosts);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","v4","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","dummyPostsGenerator","addPost","action","id","type","data","myInfo","text","err","error","response","deletePost","addComment","loadPosts","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from 'redux-saga/effects';\r\nimport { v4 } from 'uuid';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\nimport { dummyPostsGenerator } from '../reducers/post';\r\n\r\n// const addPostAPI = () => axios.post('api/add-post');\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    const id = v4();\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        myInfo: action.data.myInfo,\r\n        text: action.data.text,\r\n      },\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// const addCommentAPI = (data) => axios.post('api/add-comment');\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\n// const loadPostsAPI = (data) => axios.get('api/posts');\r\n\r\nfunction* loadPosts(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: dummyPostsGenerator(10),\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}