{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(deletePost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchDeletePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from 'axios';\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\nimport { dummyPostsGenerator } from '../reducers/post';\n\nvar addPostAPI = function addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n};\n\nfunction addPost(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: response.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction deletePost(action) {\n  return _regeneratorRuntime.wrap(function deletePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            type: DELETE_POST_SUCCESS,\n            data: action.data\n          });\n\n        case 5:\n          _context2.next = 7;\n          return put({\n            type: DELETE_POST_OF_ME,\n            data: action.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: DELETE_POST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nvar addCommentAPI = function addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n};\n\nfunction addComment(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          response = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nvar loadPostsAPI = function loadPostsAPI() {\n  return axios.get('/posts');\n};\n\nfunction loadPosts() {\n  var response;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostsAPI);\n\n        case 3:\n          response = _context4.sent;\n          _context4.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: response.data\n          });\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          _context4.next = 12;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchDeletePost() {\n  return _regeneratorRuntime.wrap(function watchDeletePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(DELETE_POST_REQUEST, deletePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return throttle(5000, LOAD_POST_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchDeletePost), fork(watchLoadPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/post.js"],"names":["addPost","deletePost","addComment","loadPosts","watchAddPost","watchDeletePost","watchAddComment","watchLoadPosts","postSaga","axios","all","call","delay","fork","put","takeLatest","throttle","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","ADD_POST_TO_ME","DELETE_POST_OF_ME","dummyPostsGenerator","addPostAPI","data","post","content","action","response","type","id","error","addCommentAPI","postId","loadPostsAPI","get"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, call, delay, fork, put, takeLatest, throttle } from 'redux-saga/effects';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\nimport { ADD_POST_TO_ME, DELETE_POST_OF_ME } from '../actions/user';\r\nimport { dummyPostsGenerator } from '../reducers/post';\r\n\r\nconst addPostAPI = (data) => axios.post('/post', { content: data });\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    const response = yield call(addPostAPI, action.data);\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: response.data.id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* deletePost(action) {\r\n  try {\r\n    yield delay(1000);\r\n    yield put({\r\n      type: DELETE_POST_SUCCESS,\r\n      data: action.data,\r\n    });\r\n    yield put({\r\n      type: DELETE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: DELETE_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst addCommentAPI = (data) => axios.post(`/post/${data.postId}/comment`, data);\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    const response = yield call(addCommentAPI, action.data);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nconst loadPostsAPI = () => axios.get('/posts');\r\n\r\nfunction* loadPosts() {\r\n  try {\r\n    const response = yield call(loadPostsAPI);\r\n    yield put({\r\n      type: LOAD_POST_SUCCESS,\r\n      data: response.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOAD_POST_FAILURE,\r\n      error: err.response.data,\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  // while (true) {\r\n  //     yield take('ADD_POST_REQUEST', addPost);\r\n  // }\r\n\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchDeletePost() {\r\n  yield takeLatest(DELETE_POST_REQUEST, deletePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield throttle(5000, LOAD_POST_REQUEST, loadPosts);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment),\r\n    fork(watchDeletePost), fork(watchLoadPosts)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}