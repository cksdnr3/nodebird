{"ast":null,"code":"import { all, fork } from '@redux-saga/core/effects';\nimport axios from 'axios';\nimport { delay, put, takeLatest } from 'redux-saga/effects'; // const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\n\nfunction loginAPI(data) {\n  return axios.post('api/login', data);\n}\n\nfunction* login(action) {\n  // const result = yield call(loginAPI, action.data);\n  console.log(action);\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: 'LOGIN_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOGIN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction logoutAPI() {\n  return axios.post('api/logout');\n}\n\nfunction* logout() {\n  // const result = yield call(logoutAPI);\n  console.log(action);\n\n  try {\n    yield delay(1000);\n    yield put({\n      type: 'LOGOUT_SUCCESS' // data: result.data,\n\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOGOUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  // while (true) {\n  //     yield take('LOG_IN_REQUEST', login);\n  // }\n  yield takeLatest('LOGIN_REQUEST', login);\n}\n\nfunction* watchLogout() {\n  // while (true) {\n  //     yield take('LOG_OUT_REQUEST', logout);\n  // }\n  yield takeLatest('LOGOUT_REQUEST', logout);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogout)]);\n}","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/sagas/user.js"],"names":["all","fork","axios","delay","put","takeLatest","loginAPI","data","post","login","action","console","log","type","err","response","logoutAPI","logout","watchLogin","watchLogout","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,UAArB,QAAuC,oBAAvC,C,CAEA;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOL,KAAK,CAACM,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,MAAI;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,eADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,eADA;AAENN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,SAASS,SAAT,GAAqB;AACjB,SAAOd,KAAK,CAACM,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf;AACAN,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,MAAI;AACA,UAAMP,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA,CAEN;;AAFM,KAAD,CAAT;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENN,MAAAA,IAAI,EAAEO,GAAG,CAACC,QAAJ,CAAaR;AAFb,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,UAAV,GAAuB;AACnB;AACA;AACA;AACA,QAAMb,UAAU,CAAC,eAAD,EAAkBI,KAAlB,CAAhB;AACH;;AAED,UAAUU,WAAV,GAAwB;AACpB;AACA;AACA;AAEA,QAAMd,UAAU,CAAC,gBAAD,EAAmBY,MAAnB,CAAhB;AACH;;AAED,eAAe,UAAUG,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CAACC,IAAI,CAACiB,UAAD,CAAL,EAAmBjB,IAAI,CAACkB,WAAD,CAAvB,CAAD,CAAT;AACH","sourcesContent":["import { all, fork } from '@redux-saga/core/effects';\r\nimport axios from 'axios';\r\nimport { delay, put, takeLatest } from 'redux-saga/effects';\r\n\r\n// const l = login({ type: 'LOG_IN_REQUEST', data: { id: 'cksdnr333@gmail.com' } });\r\n\r\nfunction loginAPI(data) {\r\n    return axios.post('api/login', data);\r\n}\r\n\r\nfunction* login(action) {\r\n    // const result = yield call(loginAPI, action.data);\r\n    console.log(action);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOGIN_SUCCESS',\r\n            // data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOGIN_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction logoutAPI() {\r\n    return axios.post('api/logout');\r\n}\r\n\r\nfunction* logout() {\r\n    // const result = yield call(logoutAPI);\r\n    console.log(action);\r\n    try {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'LOGOUT_SUCCESS',\r\n            // data: result.data,\r\n        });\r\n    } catch (err) {\r\n        yield put({\r\n            type: 'LOGOUT_FAILURE',\r\n            data: err.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    // while (true) {\r\n    //     yield take('LOG_IN_REQUEST', login);\r\n    // }\r\n    yield takeLatest('LOGIN_REQUEST', login);\r\n}\r\n\r\nfunction* watchLogout() {\r\n    // while (true) {\r\n    //     yield take('LOG_OUT_REQUEST', logout);\r\n    // }\r\n\r\n    yield takeLatest('LOGOUT_REQUEST', logout);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([fork(watchLogin), fork(watchLogout)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}