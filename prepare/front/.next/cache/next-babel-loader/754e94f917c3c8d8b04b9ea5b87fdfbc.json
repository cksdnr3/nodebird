{"ast":null,"code":"import produce from 'immer';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LIKE_FAILURE, LIKE_REQUEST, LIKE_SUCCESS, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POSTS_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, REMOVE_IMAGE, RETWEET_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, UNLIKE_FAILURE, UNLIKE_REQUEST, UNLIKE_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../actions/post';\nexport var initialState = {\n  mainPosts: [],\n  singlePost: {},\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  likeLoading: false,\n  likeDone: false,\n  likeError: null,\n  unlikeLoading: false,\n  unlikeDone: false,\n  unlikeError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null,\n  hasMorePosts: true\n};\nexport var addPostRequestAction = function addPostRequestAction(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var deletePostRequestAction = function deletePostRequestAction(data) {\n  return {\n    type: DELETE_POST_REQUEST,\n    data: data\n  };\n};\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false; // immer 사용\n\n        draft.mainPosts.unshift(action.data); // immer 사용 X\n        // [dummyPost(action.data), ...state.mainPosts];\n\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        console.log(action.error);\n        break;\n\n      case DELETE_POST_REQUEST:\n        draft.deletePostLoading = true;\n        break;\n\n      case DELETE_POST_SUCCESS:\n        draft.deletePostLoading = false;\n        draft.deletePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (p) {\n          return p.id !== action.data.PostId;\n        });\n        break;\n\n      case DELETE_POST_FAILURE:\n        draft.deletePostLoading = false;\n        draft.deletePostError = action.error;\n        break;\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          draft.addCommentDone = true;\n          draft.addCommentLoading = false;\n          var post = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n        }\n        break;\n\n      case ADD_COMMENT_FAILURE:\n        draft.loadPostsError = action.error;\n        draft.loadPostsLoading = false;\n        break;\n\n      case LOAD_USER_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        break;\n\n      case LOAD_USER_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        draft.hasMorePosts = draft.mainPosts.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n\n      case LIKE_REQUEST:\n        draft.likeLoading = true;\n        break;\n\n      case LIKE_SUCCESS:\n        {\n          draft.likeLoading = false;\n          draft.likeDone = true;\n\n          var _post = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n\n          _post.Likers.push({\n            id: action.data.UserId\n          });\n\n          break;\n        }\n\n      case LIKE_FAILURE:\n        draft.likeError = action.Error;\n        draft.likeLoading = false;\n        break;\n\n      case UNLIKE_REQUEST:\n        draft.unlikeLoading = true;\n        break;\n\n      case UNLIKE_SUCCESS:\n        {\n          draft.unlikeLoading = false;\n          draft.unlikeDone = true;\n\n          var _post2 = draft.mainPosts.find(function (p) {\n            return p.id === action.data.PostId;\n          });\n\n          _post2.Likers = _post2.Likers.filter(function (l) {\n            return l.id !== action.data.UserId;\n          });\n          break;\n        }\n\n      case UNLIKE_FAILURE:\n        draft.unlikeError = action.Error;\n        draft.unlikeLoading = false;\n        break;\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        draft.imagePaths = action.data;\n        break;\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n\n      case REMOVE_IMAGE:\n        if (action.data) {\n          draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n            return i !== action.data;\n          });\n        } else {\n          draft.imagePaths = [];\n        }\n\n        break;\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        break;\n\n      case RETWEET_SUCCESS:\n        draft.retweetLoading = false;\n        draft.retweetDone = true;\n        console.log(action.data);\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        console.error(action.error);\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer; // export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\n//   id: v4(),\n//   User: {\n//     id: v4(),\n//     nickname: faker.name.findName(),\n//   },\n//   content: faker.lorem.paragraph(),\n//   Images: [{\n//     src: faker.image.image(),\n//   }],\n//   Comments: [{\n//     User: {\n//       id: v4(),\n//       nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.sentence(),\n//   }],\n// }));\n// const dummyPost = (data) => ({\n//   id: data.id,\n//   content: data.text,\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   Images: [],\n//   Comments: [],\n// });\n// const dummyComment = (data) => ({\n//   id: v4(),\n//   User: {\n//     id: data.myInfo.id,\n//     nickname: data.myInfo.nickname,\n//   },\n//   content: data.content,\n// });","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["produce","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LIKE_FAILURE","LIKE_REQUEST","LIKE_SUCCESS","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POSTS_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","REMOVE_IMAGE","RETWEET_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","UNLIKE_FAILURE","UNLIKE_REQUEST","UNLIKE_SUCCESS","UPLOAD_IMAGES_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","initialState","mainPosts","singlePost","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","loadPostsLoading","loadPostsDone","loadPostsError","loadPostLoading","loadPostDone","loadPostError","likeLoading","likeDone","likeError","unlikeLoading","unlikeDone","unlikeError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","hasMorePosts","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","reducer","state","action","draft","unshift","error","console","log","filter","p","id","PostId","post","find","Comments","concat","length","Likers","push","UserId","Error","l","v","i"],"mappings":"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","sourcesContent":["import produce from 'immer';\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  DELETE_POST_FAILURE,\r\n  DELETE_POST_REQUEST,\r\n  DELETE_POST_SUCCESS,\r\n  LIKE_FAILURE,\r\n  LIKE_REQUEST,\r\n  LIKE_SUCCESS,\r\n  LOAD_HASHTAG_POSTS_REQUEST,\r\n  LOAD_HASHTAG_POSTS_SUCCESS,\r\n  LOAD_POST_FAILURE,\r\n  LOAD_POST_REQUEST,\r\n  LOAD_POST_SUCCESS,\r\n  LOAD_POSTS_FAILURE,\r\n  LOAD_POSTS_REQUEST,\r\n  LOAD_POSTS_SUCCESS,\r\n  LOAD_USER_POSTS_REQUEST,\r\n  LOAD_USER_POSTS_SUCCESS,\r\n  REMOVE_IMAGE,\r\n  RETWEET_FAILURE,\r\n  RETWEET_REQUEST,\r\n  RETWEET_SUCCESS,\r\n  UNLIKE_FAILURE,\r\n  UNLIKE_REQUEST,\r\n  UNLIKE_SUCCESS,\r\n  UPLOAD_IMAGES_FAILURE,\r\n  UPLOAD_IMAGES_REQUEST,\r\n  UPLOAD_IMAGES_SUCCESS,\r\n} from '../actions/post';\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  singlePost: {},\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  loadPostLoading: false,\r\n  loadPostDone: false,\r\n  loadPostError: null,\r\n  likeLoading: false,\r\n  likeDone: false,\r\n  likeError: null,\r\n  unlikeLoading: false,\r\n  unlikeDone: false,\r\n  unlikeError: null,\r\n  uploadImagesLoading: false,\r\n  uploadImagesDone: false,\r\n  uploadImagesError: null,\r\n  retweetLoading: false,\r\n  retweetDone: false,\r\n  retweetError: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = true;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(action.data);\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      console.log(action.error);\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data.PostId);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS: {\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Comments.unshift(action.data);\r\n    }\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.loadPostsError = action.error;\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_USER_POSTS_REQUEST:\r\n    case LOAD_HASHTAG_POSTS_REQUEST:\r\n    case LOAD_POSTS_REQUEST:\r\n      draft.loadPostsLoading = true;\r\n      break;\r\n    case LOAD_USER_POSTS_SUCCESS:\r\n    case LOAD_HASHTAG_POSTS_SUCCESS:\r\n    case LOAD_POSTS_SUCCESS:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsDone = true;\r\n      draft.mainPosts = draft.mainPosts.concat(action.data);\r\n      draft.hasMorePosts = draft.mainPosts.length === 10;\r\n      break;\r\n    case LOAD_POSTS_FAILURE:\r\n    case LOAD_POSTS_FAILURE:\r\n\r\n    case LOAD_POSTS_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostLoading = true;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostDone = true;\r\n      draft.singlePost = action.data;\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostLoading = false;\r\n      draft.loadPostError = action.error;\r\n      break;\r\n    case LIKE_REQUEST:\r\n      draft.likeLoading = true;\r\n      break;\r\n    case LIKE_SUCCESS: {\r\n      draft.likeLoading = false;\r\n      draft.likeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers.push({ id: action.data.UserId });\r\n      break;\r\n    }\r\n    case LIKE_FAILURE:\r\n      draft.likeError = action.Error;\r\n      draft.likeLoading = false;\r\n      break;\r\n    case UNLIKE_REQUEST:\r\n      draft.unlikeLoading = true;\r\n      break;\r\n    case UNLIKE_SUCCESS: {\r\n      draft.unlikeLoading = false;\r\n      draft.unlikeDone = true;\r\n      const post = draft.mainPosts.find((p) => p.id === action.data.PostId);\r\n      post.Likers = post.Likers.filter((l) => l.id !== action.data.UserId);\r\n      break;\r\n    }\r\n    case UNLIKE_FAILURE:\r\n      draft.unlikeError = action.Error;\r\n      draft.unlikeLoading = false;\r\n      break;\r\n    case UPLOAD_IMAGES_REQUEST:\r\n      draft.uploadImagesLoading = true;\r\n      break;\r\n    case UPLOAD_IMAGES_SUCCESS:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesDone = true;\r\n      draft.imagePaths = action.data;\r\n      break;\r\n    case UPLOAD_IMAGES_FAILURE:\r\n      draft.uploadImagesLoading = false;\r\n      draft.uploadImagesError = action.error;\r\n      break;\r\n    case REMOVE_IMAGE:\r\n      if (action.data) {\r\n        draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\r\n      } else {\r\n        draft.imagePaths = [];\r\n      }\r\n      break;\r\n    case RETWEET_REQUEST:\r\n      draft.retweetLoading = true;\r\n      break;\r\n    case RETWEET_SUCCESS:\r\n      draft.retweetLoading = false;\r\n      draft.retweetDone = true;\r\n      console.log(action.data);\r\n      draft.mainPosts.unshift(action.data);\r\n      break;\r\n    case RETWEET_FAILURE:\r\n      draft.retweetLoading = false;\r\n      draft.retweetError = action.error;\r\n      console.error(action.error);\r\n      break;\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n\r\n// export const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: v4(),\r\n//     nickname: faker.name.findName(),\r\n//   },\r\n//   content: faker.lorem.paragraph(),\r\n//   Images: [{\r\n//     src: faker.image.image(),\r\n//   }],\r\n//   Comments: [{\r\n//     User: {\r\n//       id: v4(),\r\n//       nickname: faker.name.findName(),\r\n//     },\r\n//     content: faker.lorem.sentence(),\r\n//   }],\r\n// }));\r\n\r\n// const dummyPost = (data) => ({\r\n//   id: data.id,\r\n//   content: data.text,\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   Images: [],\r\n//   Comments: [],\r\n// });\r\n\r\n// const dummyComment = (data) => ({\r\n//   id: v4(),\r\n//   User: {\r\n//     id: data.myInfo.id,\r\n//     nickname: data.myInfo.nickname,\r\n//   },\r\n//   content: data.content,\r\n// });\r\n"]},"metadata":{},"sourceType":"module"}