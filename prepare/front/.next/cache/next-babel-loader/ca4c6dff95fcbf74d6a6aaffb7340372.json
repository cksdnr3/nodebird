{"ast":null,"code":"import { v4 } from 'uuid';\nimport produce from 'immer';\nimport faker from 'faker';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\nexport const dummyPostsGenerator = number => Array(number).fill().map(() => ({\n  id: v4(),\n  User: {\n    id: v4(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: v4(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\nexport const initialState = {\n  mainPosts: dummyPostsGenerator(10),\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  deletePostLoading: false,\n  deletePostDone: false,\n  deletePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  hasMorePosts: true\n};\nexport const addPostRequestAction = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const deletePostRequestAction = data => ({\n  type: DELETE_POST_REQUEST,\n  data\n});\nexport const addCommentRequestAction = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.text,\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: v4(),\n  User: {\n    id: data.myInfo.id,\n    nickname: data.myInfo.nickname\n  },\n  content: data.content\n});\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = false;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = true;\n      draft.addPostLoading = false; // immer 사용\n\n      draft.mainPosts.unshift(dummyPost(action.data)); // immer 사용 X\n      // [dummyPost(action.data), ...state.mainPosts];\n\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case DELETE_POST_REQUEST:\n      draft.deletePostLoading = true;\n      break;\n\n    case DELETE_POST_SUCCESS:\n      draft.deletePostLoading = false;\n      draft.deletePostDone = true;\n      draft.mainPosts = draft.mainPosts.filter(p => p.id !== action.data);\n      break;\n\n    case DELETE_POST_FAILURE:\n      draft.deletePostLoading = false;\n      draft.deletePostError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      draft.addCommentDone = true;\n      draft.addCommentLoading = false;\n      draft.mainPosts.find(p => p.id === action.data.postId).Comments.unshift(dummyComment(action.data)); //   draft.mainPosts.forEach((post) => {\n      //     if (post.id === action.data.postId) {\n      //       post.Comments.unshift(dummyComment(action.data));\n      //     }\n      //   });\n\n      break;\n\n    case ADD_COMMENT_FAILURE:\n      draft.loadPostsError = action.error;\n      draft.loadPostsLoading = false;\n      break;\n\n    case LOAD_POST_REQUEST:\n      draft.loadPostsLoading = false;\n      break;\n\n    case LOAD_POST_SUCCESS:\n      draft.loadPostsLoading = true;\n      draft.loadPostsLoading = false;\n      draft.mainPosts = action.data.concat(draft.mainPosts);\n      break;\n\n    case LOAD_POST_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/cksdn/dev/project/nodebird/prepare/front/reducers/post.js"],"names":["v4","produce","faker","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","DELETE_POST_FAILURE","DELETE_POST_REQUEST","DELETE_POST_SUCCESS","LOAD_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","dummyPostsGenerator","number","Array","fill","map","id","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","deletePostLoading","deletePostDone","deletePostError","loadPostsLoading","loadPostsDone","loadPostsError","hasMorePosts","addPostRequestAction","data","type","deletePostRequestAction","addCommentRequestAction","dummyPost","text","myInfo","dummyComment","reducer","state","action","draft","unshift","error","filter","p","find","postId","concat"],"mappings":"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","sourcesContent":["import { v4 } from 'uuid';\r\nimport produce from 'immer';\r\nimport faker from 'faker';\r\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, DELETE_POST_FAILURE, DELETE_POST_REQUEST, DELETE_POST_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS } from '../actions/post';\r\n\r\nexport const dummyPostsGenerator = (number) => Array(number).fill().map(() => ({\r\n  id: v4(),\r\n  User: {\r\n    id: v4(),\r\n    nickname: faker.name.findName(),\r\n  },\r\n  content: faker.lorem.paragraph(),\r\n  Images: [{\r\n    src: faker.image.image(),\r\n  }],\r\n  Comments: [{\r\n    User: {\r\n      id: v4(),\r\n      nickname: faker.name.findName(),\r\n    },\r\n    content: faker.lorem.sentence(),\r\n  }],\r\n}));\r\n\r\nexport const initialState = {\r\n  mainPosts: dummyPostsGenerator(10),\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n  deletePostLoading: false,\r\n  deletePostDone: false,\r\n  deletePostError: null,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  hasMorePosts: true,\r\n};\r\n\r\nexport const addPostRequestAction = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const deletePostRequestAction = (data) => ({\r\n  type: DELETE_POST_REQUEST,\r\n  data,\r\n});\r\nexport const addCommentRequestAction = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => ({\r\n  id: data.id,\r\n  content: data.text,\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  Images: [],\r\n  Comments: [],\r\n});\r\n\r\nconst dummyComment = (data) => ({\r\n  id: v4(),\r\n  User: {\r\n    id: data.myInfo.id,\r\n    nickname: data.myInfo.nickname,\r\n  },\r\n  content: data.content,\r\n});\r\n\r\nconst reducer = (state = initialState, action) => produce(state, (draft) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      draft.addPostLoading = false;\r\n      break;\r\n    case ADD_POST_SUCCESS:\r\n      draft.addPostLoading = true;\r\n      draft.addPostLoading = false;\r\n      // immer 사용\r\n      draft.mainPosts.unshift(dummyPost(action.data));\r\n      // immer 사용 X\r\n      // [dummyPost(action.data), ...state.mainPosts];\r\n      break;\r\n    case ADD_POST_FAILURE:\r\n      draft.addPostLoading = false;\r\n      draft.addPostError = action.error;\r\n      break;\r\n    case DELETE_POST_REQUEST:\r\n      draft.deletePostLoading = true;\r\n      break;\r\n    case DELETE_POST_SUCCESS:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostDone = true;\r\n      draft.mainPosts = draft.mainPosts.filter((p) => p.id !== action.data);\r\n      break;\r\n    case DELETE_POST_FAILURE:\r\n      draft.deletePostLoading = false;\r\n      draft.deletePostError = action.error;\r\n      break;\r\n    case ADD_COMMENT_REQUEST:\r\n      draft.addCommentLoading = true;\r\n      break;\r\n    case ADD_COMMENT_SUCCESS:\r\n      draft.addCommentDone = true;\r\n      draft.addCommentLoading = false;\r\n      draft.mainPosts.find((p) => p.id === action.data.postId)\r\n        .Comments.unshift(dummyComment(action.data));\r\n      //   draft.mainPosts.forEach((post) => {\r\n      //     if (post.id === action.data.postId) {\r\n      //       post.Comments.unshift(dummyComment(action.data));\r\n      //     }\r\n      //   });\r\n      break;\r\n    case ADD_COMMENT_FAILURE:\r\n      draft.loadPostsError = action.error;\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_POST_REQUEST:\r\n      draft.loadPostsLoading = false;\r\n      break;\r\n    case LOAD_POST_SUCCESS:\r\n      draft.loadPostsLoading = true;\r\n      draft.loadPostsLoading = false;\r\n      draft.mainPosts = action.data.concat(draft.mainPosts);\r\n\r\n      break;\r\n    case LOAD_POST_FAILURE:\r\n      draft.loadPostsLoading = false;\r\n      draft.loadPostsError = action.error;\r\n      break;\r\n\r\n    default: break;\r\n  }\r\n});\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}